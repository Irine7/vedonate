const USER_ADDRESS = '0xb302484fc7cbecad3983E6C33efE28C3286972f6';
const CONTRACT_ADDRESS = '0x3e445638b907d942c33b904d6ea6951ac533bc34';

async function checkUserRegistrationStatus() {
	console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
	console.log('üìç –ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', USER_ADDRESS);
	console.log('üìÑ –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', CONTRACT_ADDRESS);
	console.log('');

	try {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π VeChain REST API —ç–Ω–¥–ø–æ–∏–Ω—Ç
		const apiUrl = 'https://testnet.vechain.org';

		console.log('üìû –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ —á–µ—Ä–µ–∑ VeChain REST API...');

		// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
		const contractResponse = await fetch(`${apiUrl}/accounts/${CONTRACT_ADDRESS}`);

		console.log('üì° HTTP —Å—Ç–∞—Ç—É—Å:', contractResponse.status);
		console.log('üì° HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏:', Object.fromEntries(contractResponse.headers.entries()));
		
		const responseText = await contractResponse.text();
		console.log('üì° –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', responseText.substring(0, 500));
		
		if (!responseText) {
			throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
		}
		
		const contractInfo = JSON.parse(responseText);

		console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ:', contractInfo);

		if (contractInfo.balance !== undefined) {
			console.log('‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–µ–Ω');
			console.log('üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', contractInfo.balance);
			console.log('üî¢ –≠–Ω–µ—Ä–≥–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', contractInfo.energy || 'N/A');
		} else {
			console.log('‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω');
		}

		// –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
		console.log('\nüìû –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...');
		const codeResponse = await fetch(`${apiUrl}/accounts/${CONTRACT_ADDRESS}/code`);
		
		if (codeResponse.ok) {
			const codeInfo = await codeResponse.json();
			console.log('üìä –ö–æ–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞:', codeInfo.code ? codeInfo.code.length : 0);
		} else {
			console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞');
		}

		// –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
		console.log('\nüìû –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...');
		const userResponse = await fetch(`${apiUrl}/accounts/${USER_ADDRESS}`);
		
		if (userResponse.ok) {
			const userInfo = await userResponse.json();
			console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', userInfo);
		} else {
			console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
		}

		// –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
		console.log('\nüìû –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');
		
		// –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–±—ã—Ç–∏–π
		const eventEndpoints = [
			`${apiUrl}/logs/event?address=${CONTRACT_ADDRESS}&topic0=0x5b34c965`,
			`${apiUrl}/logs/event?address=${CONTRACT_ADDRESS}`,
			`${apiUrl}/logs/event`,
			`${apiUrl}/logs`,
		];

		for (const endpoint of eventEndpoints) {
			console.log(`   –ü—Ä–æ–±—É–µ–º: ${endpoint}`);
			try {
				const eventsResponse = await fetch(endpoint);
				
				if (eventsResponse.ok) {
					const eventsInfo = await eventsResponse.json();
					console.log('üìä –°–æ–±—ã—Ç–∏—è –ø–æ–ª—É—á–µ–Ω—ã:', eventsInfo);
					break;
				} else {
					console.log(`   ‚ùå –°—Ç–∞—Ç—É—Å: ${eventsResponse.status}`);
				}
			} catch (e) {
				console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${e.message}`);
			}
		}

		// –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

		// –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
		const txEndpoints = [
			`${apiUrl}/accounts/${USER_ADDRESS}/transactions?limit=10`,
			`${apiUrl}/accounts/${USER_ADDRESS}/transactions`,
			`${apiUrl}/transactions?account=${USER_ADDRESS}`,
			`${apiUrl}/transactions`,
		];

		for (const endpoint of txEndpoints) {
			console.log(`   –ü—Ä–æ–±—É–µ–º: ${endpoint}`);
			try {
				const txResponse = await fetch(endpoint);
				
				if (txResponse.ok) {
					const txData = await txResponse.json();
					console.log(`üìà –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ: ${txData.length || 0}`);
					console.log('üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', txData);
					break;
				} else {
					console.log(`   ‚ùå –°—Ç–∞—Ç—É—Å: ${txResponse.status}`);
				}
			} catch (e) {
				console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${e.message}`);
			}
		}

	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:', error);
	}
}

checkUserRegistrationStatus().catch(console.error);
