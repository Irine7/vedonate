const USER_ADDRESS = '0xb302484fc7cbecad3983E6C33efE28C3286972f6';
const CONTRACT_ADDRESS = '0x3e445638b907d942c33b904d6ea6951ac533bc34';

async function checkUserRegistrationStatus() {
	console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
	console.log('üìç –ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', USER_ADDRESS);
	console.log('üìÑ –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', CONTRACT_ADDRESS);
	console.log('');

	try {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º VeChain REST API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
		const apiUrl = 'https://testnet.veblocks.net';

		console.log(
			'üìû –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ —á–µ—Ä–µ–∑ VeChain REST API...'
		);

		// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
		const contractResponse = await fetch(
			`${apiUrl}/accounts/${CONTRACT_ADDRESS}`
		);

		console.log('üì° HTTP —Å—Ç–∞—Ç—É—Å:', contractResponse.status);
		console.log(
			'üì° HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏:',
			Object.fromEntries(contractResponse.headers.entries())
		);

		const responseText = await contractResponse.text();
		console.log('üì° –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', responseText.substring(0, 500));

		if (!responseText) {
			throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
		}

		const contractInfo = JSON.parse(responseText);

		console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ:', contractInfo);

		if (contractInfo.balance !== undefined) {
			console.log('‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–µ–Ω');
			console.log('üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', contractInfo.balance);
			console.log('üî¢ –≠–Ω–µ—Ä–≥–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', contractInfo.energy || 'N/A');
		} else {
			console.log('‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω');
		}

		// –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
		console.log('\nüìû –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...');
		const codeResponse = await fetch(
			`${apiUrl}/accounts/${CONTRACT_ADDRESS}/code`
		);

		if (codeResponse.ok) {
			const codeInfo = await codeResponse.json();
			console.log(
				'üìä –ö–æ–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞:',
				codeInfo.code ? codeInfo.code.length : 0
			);
		} else {
			console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞');
		}

		// –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø—Ä–æ–≤–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
		console.log('\nüìû –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...');
		const eventsResponse = await fetch(
			`${apiUrl}/logs/event?address=${CONTRACT_ADDRESS}&topic0=0x5b34c965`
		);

		if (eventsResponse.ok) {
			const eventsInfo = await eventsResponse.json();
			console.log('üìä –°–æ–±—ã—Ç–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', eventsInfo);
		} else {
			console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞');
		}

		// –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å storage –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
		console.log('\nüìû –ü—Ä–æ–≤–µ—Ä—è–µ–º storage –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...');
		const storageResponse = await fetch(
			`${apiUrl}/accounts/${CONTRACT_ADDRESS}/storage`
		);

		if (storageResponse.ok) {
			const storageInfo = await storageResponse.json();
			console.log('üìä Storage –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', storageInfo);
		} else {
			console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å storage –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞');
		}

		// –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VeChain REST API –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
		console.log('\nüìû –ü—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ REST API...');

		// –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
		const callRequest = {
			clauses: [
				{
					to: CONTRACT_ADDRESS,
					value: '0x0',
					data: '0x5b34c965' + USER_ADDRESS.slice(2).padStart(64, '0'), // isDonorRegistered(address)
				},
			],
		};

		console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:', JSON.stringify(callRequest, null, 2));

		const callResponse = await fetch(`${apiUrl}/accounts/${CONTRACT_ADDRESS}`, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			},
			body: JSON.stringify(callRequest),
		});

		console.log('üì° HTTP —Å—Ç–∞—Ç—É—Å:', callResponse.status);
		console.log(
			'üì° HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏:',
			Object.fromEntries(callResponse.headers.entries())
		);

		const callResponseText = await callResponse.text();
		console.log('üì° –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', callResponseText.substring(0, 500));

		if (
			callResponseText &&
			callResponseText !== 'This endpoint is no longer supported.'
		) {
			try {
				const callResult = JSON.parse(callResponseText);
				console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞:', callResult);
			} catch (e) {
				console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON');
			}
		}

		// –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');

		try {
			// –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
			const txResponse = await fetch(
				`https://explore-testnet.vechain.org/api/transactions?address=${USER_ADDRESS}`
			);

			if (txResponse.ok) {
				const txData = await txResponse.json();
				console.log(
					`üìà –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω–æ: ${txData.length || 0}`
				);

				// –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫ –Ω–∞—à–µ–º—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
				const contractTxs = txData.filter((tx) =>
					tx.clauses?.some((clause) => clause.to === CONTRACT_ADDRESS)
				);

				console.log(
					`üìã –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É VeDonate: ${contractTxs.length}`
				);

				if (contractTxs.length > 0) {
					console.log('\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É:');
					contractTxs.slice(0, 3).forEach((tx, index) => {
						console.log(`   ${index + 1}. ID: ${tx.txID || tx.id}`);
						console.log(`      –°—Ç–∞—Ç—É—Å: ${tx.txStatus || tx.status}`);
						console.log(`      –ë–ª–æ–∫: ${tx.blockNumber || tx.block}`);
						console.log(
							`      –í—Ä–µ–º—è: ${
								tx.timestamp
									? new Date(tx.timestamp * 1000).toLocaleString()
									: 'unknown'
							}`
						);

						const registerClause = tx.clauses?.find(
							(clause) =>
								clause.to === CONTRACT_ADDRESS && clause.data === '0x5b34c965'
						);

						if (registerClause) {
							console.log(
								`      üéØ –≠—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (registerDonor)`
							);
						}
						console.log('');
					});
				}
			} else {
				console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
			}
		} catch (txError) {
			console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError.message);
		}
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:', error);
	}
}

checkUserRegistrationStatus().catch(console.error);
