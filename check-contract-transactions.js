const CONTRACT_ADDRESS = '0x3e445638b907d942c33b904d6ea6951ac533bc34';
const USER_ADDRESS = '0xb302484fc7cbecad3983E6C33efE28C3286972f6';

async function checkContractTransactions() {
	console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...');
	console.log('üìÑ –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', CONTRACT_ADDRESS);
	console.log('üìç –ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', USER_ADDRESS);
	console.log('');

	try {
		// –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
		console.log('üìà –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...');
		const contractResponse = await fetch(
			`https://explore-testnet.vechain.org/api/accounts/${CONTRACT_ADDRESS}/transactions`
		);
		const contractData = await contractResponse.json();

		console.log(`üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${contractData.count}`);

		if (contractData.items && contractData.items.length > 0) {
			console.log('\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:');

			contractData.items.slice(0, 10).forEach((tx, index) => {
				console.log(`   ${index + 1}. ID: ${tx.txID}`);
				console.log(`      –û—Ç: ${tx.origin}`);
				console.log(`      –°—Ç–∞—Ç—É—Å: ${tx.txStatus}`);
				console.log(`      –ë–ª–æ–∫: ${tx.blockNumber || 'pending'}`);
				console.log(
					`      –í—Ä–µ–º—è: ${
						tx.timestamp
							? new Date(tx.timestamp * 1000).toLocaleString()
							: 'pending'
					}`
				);

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º clause —Å –¥–∞–Ω–Ω—ã–º–∏
				const registerClause = tx.clauses?.find(
					(clause) =>
						clause.to === CONTRACT_ADDRESS && clause.data === '0x5b34c965'
				);

				if (registerClause) {
					console.log(`      üéØ –≠—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (registerDonor)`);

					// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ –Ω–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
					if (tx.origin?.toLowerCase() === USER_ADDRESS.toLowerCase()) {
						console.log(`      üéØ –≠–¢–û –ù–ê–® –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨!`);

						if (tx.txStatus === 'success') {
							console.log(`      ‚úÖ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!`);
						} else if (tx.txStatus === 'failed') {
							console.log(`      ‚ùå –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–ï–£–î–ê–ß–ù–ê!`);
						} else {
							console.log(`      ‚è≥ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –í –û–ë–†–ê–ë–û–¢–ö–ï...`);
						}
					}
				}

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ clauses
				if (tx.clauses) {
					tx.clauses.forEach((clause, clauseIndex) => {
						if (clause.to === CONTRACT_ADDRESS) {
							console.log(
								`      Clause ${clauseIndex + 1}: data = ${clause.data}`
							);
							if (clause.data === '0x5b34c965') {
								console.log(`         -> registerDonor() call`);
							}
						}
					});
				}

				console.log('');
			});

			// –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç –Ω–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			const userTransactions = contractData.items.filter(
				(tx) => tx.origin?.toLowerCase() === USER_ADDRESS.toLowerCase()
			);

			console.log(
				`üéØ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç –Ω–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userTransactions.length}`
			);

			if (userTransactions.length > 0) {
				console.log('\nüìù –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç –Ω–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
				userTransactions.forEach((tx, index) => {
					console.log(`   ${index + 1}. ID: ${tx.txID}`);
					console.log(`      –°—Ç–∞—Ç—É—Å: ${tx.txStatus}`);
					console.log(`      –ë–ª–æ–∫: ${tx.blockNumber || 'pending'}`);
					console.log(
						`      –í—Ä–µ–º—è: ${
							tx.timestamp
								? new Date(tx.timestamp * 1000).toLocaleString()
								: 'pending'
						}`
					);

					const registerClause = tx.clauses?.find(
						(clause) =>
							clause.to === CONTRACT_ADDRESS && clause.data === '0x5b34c965'
					);

					if (registerClause) {
						console.log(`      üéØ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏`);
						if (tx.txStatus === 'success') {
							console.log(`      ‚úÖ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!`);
						} else {
							console.log(`      ‚ùå –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–ï–£–î–ê–ß–ù–ê!`);
						}
					}
					console.log('');
				});
			}
		} else {
			console.log('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
		}
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', error);
	}
}

checkContractTransactions().catch(console.error);
