const USER_ADDRESS = '0xb302484fc7cbecad3983E6C33efE28C3286972f6';
const CONTRACT_ADDRESS = '0x3e445638b907d942c33b904d6ea6951ac533bc34';

async function checkRegistrationStatus() {
	console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
	console.log('üìç –ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', USER_ADDRESS);
	console.log('üìÑ –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', CONTRACT_ADDRESS);
	console.log('');

	try {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		console.log('üìà –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
		const userTxsResponse = await fetch(
			`https://explore-testnet.vechain.org/api/accounts/${USER_ADDRESS}/transactions`
		);
		const userTxsData = await userTxsResponse.json();

		console.log(`üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userTxsData.count}`);

		// –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫ –Ω–∞—à–µ–º—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
		const contractTxs =
			userTxsData.items?.filter((tx) =>
				tx.clauses?.some((clause) => clause.to === CONTRACT_ADDRESS)
			) || [];

		console.log(`üìã –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É VeDonate: ${contractTxs.length}`);

		if (contractTxs.length > 0) {
			console.log('\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É:');
			contractTxs.slice(0, 5).forEach((tx, index) => {
				console.log(`   ${index + 1}. ID: ${tx.txID}`);
				console.log(`      –°—Ç–∞—Ç—É—Å: ${tx.txStatus}`);
				console.log(`      –ë–ª–æ–∫: ${tx.blockNumber || 'pending'}`);
				console.log(
					`      –í—Ä–µ–º—è: ${
						tx.timestamp
							? new Date(tx.timestamp * 1000).toLocaleString()
							: 'pending'
					}`
				);

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º clause —Å –¥–∞–Ω–Ω—ã–º–∏
				const registerClause = tx.clauses?.find(
					(clause) =>
						clause.to === CONTRACT_ADDRESS && clause.data === '0x5b34c965'
				);

				if (registerClause) {
					console.log(`      üéØ –≠—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (registerDonor)`);
				}
				console.log('');
			});

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
			const lastRegisterTx = contractTxs.find((tx) =>
				tx.clauses?.some(
					(clause) =>
						clause.to === CONTRACT_ADDRESS && clause.data === '0x5b34c965'
				)
			);

			if (lastRegisterTx) {
				console.log('üéØ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:');
				console.log(`   ID: ${lastRegisterTx.txID}`);
				console.log(`   –°—Ç–∞—Ç—É—Å: ${lastRegisterTx.txStatus}`);
				console.log(`   –ë–ª–æ–∫: ${lastRegisterTx.blockNumber || 'pending'}`);

				if (lastRegisterTx.txStatus === 'success') {
					console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –£–°–ü–ï–®–ù–ê!');
				} else if (lastRegisterTx.txStatus === 'failed') {
					console.log('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ù–ï–£–î–ê–ß–ù–ê!');
				} else {
					console.log('‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ...');
				}
			}
		} else {
			console.log('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
		console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...');
		try {
			const eventsResponse = await fetch(
				`https://explore-testnet.vechain.org/api/accounts/${CONTRACT_ADDRESS}/events`
			);
			const eventsData = await eventsResponse.json();

			console.log(`üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${eventsData.count || 0}`);

			if (eventsData.items && eventsData.items.length > 0) {
				// –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è DonorRegistered
				const donorRegisteredEvents = eventsData.items.filter(
					(event) =>
						event.topics &&
						event.topics.includes('0x' + 'DonorRegistered'.padEnd(64, '0'))
				);

				console.log(
					`üéØ –°–æ–±—ã—Ç–∏–π DonorRegistered: ${donorRegisteredEvents.length}`
				);

				if (donorRegisteredEvents.length > 0) {
					console.log('\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:');
					donorRegisteredEvents.slice(0, 3).forEach((event, index) => {
						console.log(`   ${index + 1}. –ë–ª–æ–∫: ${event.blockNumber}`);
						console.log(`      –ê–¥—Ä–µ—Å –¥–æ–Ω–æ—Ä–∞: ${event.topics[1]}`);
						console.log(
							`      –í—Ä–µ–º—è: ${new Date(
								event.timestamp * 1000
							).toLocaleString()}`
						);

						if (event.topics[1]?.toLowerCase() === USER_ADDRESS.toLowerCase()) {
							console.log(`      üéØ –≠–¢–û –ù–ê–® –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨!`);
						}
						console.log('');
					});
				}
			}
		} catch (eventsError) {
			console.warn(
				'‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:',
				eventsError.message
			);
		}
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
	}
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkRegistrationStatus().catch(console.error);
