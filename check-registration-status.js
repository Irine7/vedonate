const { ThorClient, SimpleWallet } = require('@vechain/sdk-core');
const { WebSocketConnector } = require('@vechain/sdk-network');

async function checkRegistrationStatus() {
	console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
	console.log('üìç –ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', USER_ADDRESS);
	console.log('üìÑ –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', CONTRACT_ADDRESS);
	console.log('');

	try {
		// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ VeChain Testnet
		const thorClient = new ThorClient(
			new WebSocketConnector('wss://testnet.vechain.org')
		);

		console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VeChain Testnet —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

		// ABI –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ isDonorRegistered
		const isDonorRegisteredABI = [
			{
				inputs: [{ internalType: 'address', name: 'donor', type: 'address' }],
				name: 'isDonorRegistered',
				outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
				stateMutability: 'view',
				type: 'function',
			},
		];

		// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
		const contract = thorClient.contract(
			CONTRACT_ADDRESS,
			isDonorRegisteredABI
		);

		console.log('üìû –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é isDonorRegistered...');

		// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é isDonorRegistered
		const result = await contract.read('isDonorRegistered', [USER_ADDRESS]);

		console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:');
		console.log('   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', result);

		if (result) {
			console.log('‚úÖ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –£–ñ–ï –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù!');
		} else {
			console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
		}

		// –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
		console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');

		try {
			const response = await fetch(
				`https://explore-testnet.vechain.org/api/accounts/${USER_ADDRESS}/transactions`
			);
			const data = await response.json();

			console.log(`üìà –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${data.count}`);

			// –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫ –Ω–∞—à–µ–º—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
			const contractTxs =
				data.items?.filter((tx) =>
					tx.clauses?.some((clause) => clause.to === CONTRACT_ADDRESS)
				) || [];

			console.log(`üìã –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É: ${contractTxs.length}`);

			if (contractTxs.length > 0) {
				console.log('\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É:');
				contractTxs.slice(0, 3).forEach((tx, index) => {
					console.log(`   ${index + 1}. ID: ${tx.txID}`);
					console.log(`      –°—Ç–∞—Ç—É—Å: ${tx.txStatus}`);
					console.log(`      –ë–ª–æ–∫: ${tx.blockNumber || 'pending'}`);
					console.log(
						`      –í—Ä–µ–º—è: ${
							tx.timestamp
								? new Date(tx.timestamp * 1000).toLocaleString()
								: 'pending'
						}`
					);
					console.log('');
				});
			} else {
				console.log('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
			}
		} catch (fetchError) {
			console.warn(
				'‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ API:',
				fetchError.message
			);
		}
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
	}
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const USER_ADDRESS = '0xb302484fc7cbecad3983E6C33efE28C3286972f6';
const CONTRACT_ADDRESS = '0x3e445638b907d942c33b904d6ea6951ac533bc34';

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkRegistrationStatus().catch(console.error);
