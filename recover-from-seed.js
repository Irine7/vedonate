// Script to recover private key from seed phrase (simplified version)
const crypto = require('crypto');

// WARNING: This is only for demonstration!
// In real use, NEVER store seed phrases in code!

function recoverPrivateKeyFromSeed(seedPhrase) {
	console.log('🔍 Recovering private key from seed phrase...');
	console.log(
		'⚠️ WARNING: Do not use this script with real seed phrases in production!'
	);
	console.log('');

	// Target address
	const targetAddress = '0xb302484fc7cbecad3983E6C33efE28C3286972f6';

	try {
		// Simple generation based on seed phrase
		// In real application, use BIP39 and BIP32
		const seedHash = crypto.createHash('sha256').update(seedPhrase).digest();

		console.log('📝 Seed phrase:', seedPhrase);
		console.log('🎯 Target address:', targetAddress);
		console.log('');

		// Check several generation variations
		const variations = [
			// Variant 1: Direct hash
			seedHash,
			// Variant 2: Hash with "0"
			crypto
				.createHash('sha256')
				.update(seedPhrase + '0')
				.digest(),
			// Variant 3: Hash with "1"
			crypto
				.createHash('sha256')
				.update(seedPhrase + '1')
				.digest(),
			// Variant 4: Hash with "m/44'/818'/0'/0/0"
			crypto
				.createHash('sha256')
				.update(seedPhrase + "m/44'/818'/0'/0/0")
				.digest(),
		];

		for (let i = 0; i < variations.length; i++) {
			const privateKeyBytes = variations[i];
			const privateKey = '0x' + privateKeyBytes.toString('hex');

			// Generate address (simplified version)
			const publicKey = crypto
				.createHash('sha256')
				.update(privateKeyBytes)
				.digest('hex');
			const address = '0x' + publicKey.slice(-40);

			console.log(`🔑 Variant ${i + 1}:`);
			console.log(`   Private key: ${privateKey}`);
			console.log(`   Address: ${address}`);

			if (address.toLowerCase() === targetAddress.toLowerCase()) {
				console.log('');
				console.log('✅ FOUND! Private key for target address:');
				console.log(`   ${privateKey}`);
				console.log('');
				console.log('🚀 Now you can use:');
				console.log(
					`   PRIVATE_KEY=${privateKey} node register-donor-with-key.js`
				);
				console.log('');
				console.log('⚠️ IMPORTANT:');
				console.log('   - This key is only for testing!');
				console.log('   - Make sure you have VET for gas payment');
				console.log('   - Check the balance in explorer');

				return privateKey;
			}
			console.log('');
		}

		console.log('❌ Private key not found for specified address.');
		console.log('💡 Possible reasons:');
		console.log('   - Incorrect seed phrase');
		console.log('   - Address is generated by another algorithm');
		console.log('   - You need to use the full BIP39/BIP32 implementation');
		console.log('');
		console.log('🔧 Alternative solutions:');
		console.log(
			'   1. Use VeWorld wallet to export private key'
		);
		console.log(
			'   2. Create a new test wallet: node create-test-wallet.js'
		);
		console.log('   3. Use web application VeDonate for registration');
	} catch (error) {
		console.error('❌ Error during recovery:', error.message);
	}
}

// Функция для интерактивного ввода
async function interactiveRecovery() {
	console.log('🔐 Recovering private key from seed phrase');
	console.log('');
	console.log('⚠️ WARNING:');
	console.log('   - This script is only for demonstration!');
	console.log('   - Do not use with real seed phrases in production!');
	console.log('   - Use only for test wallets!');
	console.log('');

	// В реальном приложении здесь был бы ввод от пользователя
	// Для демонстрации используем пример
	const exampleSeed =
		'abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about';

	console.log('📝 Example seed phrase (12 words):');
	console.log(`   ${exampleSeed}`);
	console.log('');

	console.log('💡 For using with your seed phrase:');
	console.log('   1. Replace the seedPhrase variable in the code');
	console.log('   2. Or use VeWorld wallet to export key');
	console.log('');

	// Show how it works with an example
	recoverPrivateKeyFromSeed(exampleSeed);
}

// Check if the seed phrase was passed as an argument
if (process.argv.length > 2) {
	const seedPhrase = process.argv.slice(2).join(' ');
	console.log('🔍 Using the passed seed phrase...');
	recoverPrivateKeyFromSeed(seedPhrase);
} else {
	console.log('🔧 Usage:');
	console.log('   node recover-from-seed.js "your seed phrase here"');
	console.log('');
	interactiveRecovery();
}
