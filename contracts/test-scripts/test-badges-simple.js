const { ethers } = require('hardhat');

/**
 * üèÜ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã NFT –±–µ–π–¥–∂–µ–π
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–∫—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–µ–π–¥–∂–µ–π
 */

async function simpleBadgeTests() {
	console.log('üèÜ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤ NFT –±–µ–π–¥–∂–µ–π...\n');

	const [deployer] = await ethers.getSigners();

	// ‚úÖ –ê–¥—Ä–µ—Å–∞ –¥–µ–ø–ª–æ–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ VeChain Testnet
	const VEDONATE_ADDRESS = '0x3e445638b907d942c33b904d6ea6951ac533bc34';
	const B3TR_ADDRESS = '0x3e0d2d748f66a56b3ed4d1afbe2e63a9db2844c3';
	const BADGES_ADDRESS = '0x9575e91189e60b4e9a41f136c87d177e42296a88';

	try {
		const veDonate = await ethers.getContractAt('VeDonate', VEDONATE_ADDRESS);
		const b3trToken = await ethers.getContractAt('B3TRToken', B3TR_ADDRESS);
		const donorBadges = await ethers.getContractAt(
			'DonorBadges',
			BADGES_ADDRESS
		);

		// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–π–¥–∂–µ–π
		const checkBadges = async (donorAddress, expectedCount, milestone) => {
			const badges = await donorBadges.getDonorBadges(donorAddress);
			console.log(`üìä –ü–æ—Å–ª–µ ${milestone}: ${badges.length} –±–µ–π–¥–∂–µ–π`);

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –±–µ–π–¥–∂
			for (let i = 0; i < badges.length; i++) {
				const tokenId = badges[i];
				const tokenURI = await donorBadges.tokenURI(tokenId);
				console.log(
					`   üèÜ –ë–µ–π–¥–∂ ${i + 1}: ID ${tokenId} - ${tokenURI.substring(
						0,
						50
					)}...`
				);
			}

			if (badges.length === expectedCount) {
				console.log(`‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ: ${expectedCount} –±–µ–π–¥–∂–µ–π –ø–æ–ª—É—á–µ–Ω–æ`);
			} else {
				console.log(
					`‚ùå –û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å ${expectedCount}, –ø–æ–ª—É—á–µ–Ω–æ ${badges.length}`
				);
			}
			console.log('');
		};

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–æ–Ω–æ—Ä–æ–≤
		console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–æ–Ω–æ—Ä–æ–≤');
		console.log('================================');

		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–º –¥–æ–Ω–æ—Ä–µ (–∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –∏–º–µ–µ—Ç –º–Ω–æ–≥–æ –¥–æ–Ω–∞—Ü–∏–π)
		const donor1Address = '0x2406180BCa83983d40191Febc6d939C62152B71b';
		const donor1Info = await veDonate.getDonorInfo(donor1Address);

		console.log('üë§ –î–æ–Ω–æ—Ä 1:');
		console.log(`- –í—Å–µ–≥–æ –¥–æ–Ω–∞—Ü–∏–π: ${donor1Info.totalDonations}`);
		console.log(`- –ü–ª–∞–∑–º–∞ –¥–æ–Ω–∞—Ü–∏–π: ${donor1Info.plasmaDonations}`);
		console.log(`- –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${donor1Info.isRegistered}`);

		await checkBadges(
			donor1Address,
			donor1Info.totalDonations >= 50
				? 5
				: donor1Info.totalDonations >= 25
				? 4
				: donor1Info.totalDonations >= 10
				? 3
				: donor1Info.totalDonations >= 5
				? 2
				: 1,
			'–ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–æ–Ω–æ—Ä–∞'
		);

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä–æ–≥–æ –¥–æ–Ω–æ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
		const donor2Address = '0xB381e7da548601B1CCB05C66d415b20baE40d828';
		const donor2Info = await veDonate.getDonorInfo(donor2Address);

		if (donor2Info.isRegistered) {
			console.log('üë§ –î–æ–Ω–æ—Ä 2:');
			console.log(`- –í—Å–µ–≥–æ –¥–æ–Ω–∞—Ü–∏–π: ${donor2Info.totalDonations}`);
			console.log(`- –ü–ª–∞–∑–º–∞ –¥–æ–Ω–∞—Ü–∏–π: ${donor2Info.plasmaDonations}`);

			await checkBadges(
				donor2Address,
				donor2Info.totalDonations >= 50
					? 5
					: donor2Info.totalDonations >= 25
					? 4
					: donor2Info.totalDonations >= 10
					? 3
					: donor2Info.totalDonations >= 5
					? 2
					: 1,
				'–ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ –¥–æ–Ω–æ—Ä–∞'
			);
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
		console.log('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã');
		console.log('=========================');

		const globalStats = await veDonate.getGlobalStats();
		console.log(`- –í—Å–µ–≥–æ –¥–æ–Ω–∞—Ü–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: ${globalStats._totalDonations}`);
		console.log(`- –í—Å–µ–≥–æ –¥–æ–Ω–æ—Ä–æ–≤: ${globalStats._totalDonors}`);
		console.log(
			`- –í—Å–µ–≥–æ B3TR —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: ${ethers.formatEther(
				globalStats._totalB3TRDistributed
			)} B3TR`
		);

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã B3TR
		console.log('\nüí∞ –ë–∞–ª–∞–Ω—Å—ã B3TR —Ç–æ–∫–µ–Ω–æ–≤');
		console.log('=======================');

		const donor1Balance = await b3trToken.balanceOf(donor1Address);
		console.log(`- –î–æ–Ω–æ—Ä 1: ${ethers.formatEther(donor1Balance)} B3TR`);

		if (donor2Info.isRegistered) {
			const donor2Balance = await b3trToken.balanceOf(donor2Address);
			console.log(`- –î–æ–Ω–æ—Ä 2: ${ethers.formatEther(donor2Balance)} B3TR`);
		}

		console.log('\nüéâ –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
		console.log('\nüìã –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:');
		console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –±–µ–π–¥–∂–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
		console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
		console.log('‚úÖ B3TR —Ç–æ–∫–µ–Ω—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
		console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
	} catch (error) {
		console.error('üí• –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Å—Ç–∞—Ö:', error);
		throw error;
	}
}

simpleBadgeTests()
	.then(() => process.exit(0))
	.catch((error) => {
		console.error('üí• –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å:', error);
		process.exit(1);
	});
