const { ethers } = require('hardhat');

/**
 * üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö
 */

async function checkContracts() {
	console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ VeDonate...\n');

	// –ê–¥—Ä–µ—Å–∞ –¥–µ–ø–ª–æ–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
	const VEDONATE_ADDRESS = '0x3e445638b907d942c33b904d6ea6951ac533bc34';
	const B3TR_ADDRESS = '0x3e0d2d748f66a56b3ed4d1afbe2e63a9db2844c3';
	const BADGES_ADDRESS = '0x9575e91189e60b4e9a41f136c87d177e42296a88';

	try {
		// –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
		console.log('üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤...');
		const veDonate = await ethers.getContractAt('VeDonate', VEDONATE_ADDRESS);
		const b3trToken = await ethers.getContractAt('B3TRToken', B3TR_ADDRESS);
		const donorBadges = await ethers.getContractAt(
			'DonorBadges',
			BADGES_ADDRESS
		);
		console.log('‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã\n');

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ B3TR Token
		console.log('üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ B3TR Token:');
		console.log('------------------------');
		try {
			const name = await b3trToken.name();
			const symbol = await b3trToken.symbol();
			const decimals = await b3trToken.decimals();
			const totalSupply = await b3trToken.totalSupply();

			console.log(`‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: ${name}`);
			console.log(`‚úÖ –°–∏–º–≤–æ–ª: ${symbol}`);
			console.log(`‚úÖ –î—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å: ${decimals}`);
			console.log(
				`‚úÖ –û–±—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: ${ethers.formatEther(totalSupply)} B3TR`
			);
		} catch (error) {
			console.log(`‚ùå –û—à–∏–±–∫–∞ B3TR Token: ${error.message}`);
		}
		console.log('');

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ Donor Badges
		console.log('üèÜ –ü—Ä–æ–≤–µ—Ä–∫–∞ Donor Badges:');
		console.log('-------------------------');
		try {
			const name = await donorBadges.name();
			const symbol = await donorBadges.symbol();
			// VeChain –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç totalSupply –¥–ª—è ERC721
			console.log(`‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: ${name}`);
			console.log(`‚úÖ –°–∏–º–≤–æ–ª: ${symbol}`);
			console.log(`‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç NFT –±–µ–π–¥–∂–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç`);
		} catch (error) {
			console.log(`‚ùå –û—à–∏–±–∫–∞ Donor Badges: ${error.message}`);
		}
		console.log('');

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ VeDonate
		console.log('ü©∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ VeDonate:');
		console.log('---------------------');
		try {
			const globalStats = await veDonate.getGlobalStats();

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ VeChain (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π)
			if (
				globalStats &&
				Array.isArray(globalStats) &&
				globalStats.length >= 3
			) {
				const totalDonations = globalStats[0];
				const totalDonors = globalStats[1];
				const totalB3TRDistributed = globalStats[2];

				console.log(`‚úÖ –í—Å–µ–≥–æ –¥–æ–Ω–∞—Ü–∏–π: ${totalDonations.toString()}`);
				console.log(`‚úÖ –í—Å–µ–≥–æ –¥–æ–Ω–æ—Ä–æ–≤: ${totalDonors.toString()}`);
				console.log(
					`‚úÖ B3TR —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: ${ethers.formatEther(totalB3TRDistributed)}`
				);
			} else {
				console.log(`‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç VeDonate —Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)`);
			}
		} catch (error) {
			console.log(`‚ùå –û—à–∏–±–∫–∞ VeDonate: ${error.message}`);
		}
		console.log('');

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏
		console.log('üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏:');
		console.log('------------------');
		try {
			const network = await ethers.provider.getNetwork();
			const blockNumber = await ethers.provider.getBlockNumber();
			// VeChain –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç getGasPrice
			console.log(`‚úÖ –°–µ—Ç—å: ${network.name} (ID: ${network.chainId})`);
			console.log(`‚úÖ –ë–ª–æ–∫: ${blockNumber}`);
			console.log(`‚úÖ VeChain Testnet –ø–æ–¥–∫–ª—é—á–µ–Ω`);
		} catch (error) {
			console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`);
		}
		console.log('');

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
		console.log('üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:');
		console.log('----------------------');
		const [deployer, donor1, donor2] = await ethers.getSigners();

		console.log(`‚úÖ –î–µ–ø–ª–æ–π–µ—Ä: ${deployer.address}`);
		console.log(`‚úÖ –î–æ–Ω–æ—Ä 1: ${donor1.address}`);
		console.log(`‚úÖ –î–æ–Ω–æ—Ä 2: ${donor2.address}`);

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤
		try {
			const deployerBalance = await ethers.provider.getBalance(
				deployer.address
			);
			const donor1Balance = await ethers.provider.getBalance(donor1.address);

			console.log(
				`üí∞ –ë–∞–ª–∞–Ω—Å –¥–µ–ø–ª–æ–π–µ—Ä–∞: ${ethers.formatEther(deployerBalance)} VET`
			);
			console.log(
				`üí∞ –ë–∞–ª–∞–Ω—Å –¥–æ–Ω–æ—Ä–∞ 1: ${ethers.formatEther(donor1Balance)} VET`
			);

			if (deployerBalance < ethers.parseEther('1')) {
				console.log('‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å –¥–µ–ø–ª–æ–π–µ—Ä–∞');
			}
		} catch (error) {
			console.log(`‚ùå –û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤: ${error.message}`);
		}
		console.log('');

		console.log('üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
		console.log('\nüìã –°–≤–æ–¥–∫–∞:');
		console.log('‚úÖ –í—Å–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã');
		console.log('‚úÖ –°–µ—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
		console.log('‚úÖ –ê–∫–∫–∞—É–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é');
		console.log('\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç–æ–≤!');
	} catch (error) {
		console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤:', error);
		throw error;
	}
}

checkContracts()
	.then(() => process.exit(0))
	.catch((error) => {
		console.error('üí• –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å');
		process.exit(1);
	});
