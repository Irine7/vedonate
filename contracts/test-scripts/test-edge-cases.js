const { ethers } = require('hardhat');

/**
 * üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏ –æ—à–∏–±–æ–∫
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ edge cases
 */

async function edgeCaseTests() {
	console.log('üö® –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤...\n');

	const [deployer, donor, nonDonor] = await ethers.getSigners();

	// ‚úÖ –ê–¥—Ä–µ—Å–∞ –¥–µ–ø–ª–æ–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ VeChain Testnet
	const VEDONATE_ADDRESS = '0x3e445638b907d942c33b904d6ea6951ac533bc34';
	const B3TR_ADDRESS = '0x3e0d2d748f66a56b3ed4d1afbe2e63a9db2844c3';
	const BADGES_ADDRESS = '0x9575e91189e60b4e9a41f136c87d177e42296a88';

	try {
		const veDonate = await ethers.getContractAt('VeDonate', VEDONATE_ADDRESS);
		const b3trToken = await ethers.getContractAt('B3TRToken', B3TR_ADDRESS);
		const donorBadges = await ethers.getContractAt(
			'DonorBadges',
			BADGES_ADDRESS
		);

		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–Ω–æ—Ä–∞ (–µ—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)
		console.log('üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–Ω–æ—Ä–∞...');
		const isRegistered = await veDonate.isDonorRegistered(donor.address);
		if (!isRegistered) {
			const regTx = await veDonate.connect(donor).registerDonor();
			await regTx.wait();
			console.log('‚úÖ –î–æ–Ω–æ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
		} else {
			console.log('‚úÖ –î–æ–Ω–æ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
		}
		console.log('');

		// –¢–µ—Å—Ç 1: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		console.log('üîÑ –¢–µ—Å—Ç 1: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
		console.log('----------------------------------------');

		try {
			await veDonate.connect(donor).registerDonor();
			console.log('‚ùå –û–®–ò–ë–ö–ê: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–π—Ç–∏!');
		} catch (error) {
			console.log('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞');
			console.log(`   –û—à–∏–±–∫–∞: ${error.message}\n`);
		}

		// –¢–µ—Å—Ç 2: –î–æ–Ω–∞—Ü–∏—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
		console.log('üö´ –¢–µ—Å—Ç 2: –î–æ–Ω–∞—Ü–∏—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
		console.log('----------------------------------------------');

		try {
			await veDonate
				.connect(deployer)
				.addDonation(nonDonor.address, 'blood', 450, 'test-center');
			console.log(
				'‚ùå –û–®–ò–ë–ö–ê: –î–æ–Ω–∞—Ü–∏—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–π—Ç–∏!'
			);
		} catch (error) {
			console.log(
				'‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –î–æ–Ω–∞—Ü–∏—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞'
			);
			console.log(`   –û—à–∏–±–∫–∞: ${error.message}\n`);
		}

		// –¢–µ—Å—Ç 3: –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–æ–≤–∏ (—Å–ª–∏—à–∫–æ–º –º–∞–ª–æ)
		console.log('üìâ –¢–µ—Å—Ç 3: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–æ–≤–∏');
		console.log('----------------------------------------');

		try {
			await veDonate.connect(deployer).addDonation(
				donor.address,
				'blood',
				100, // –°–ª–∏—à–∫–æ–º –º–∞–ª–æ
				'test-center'
			);
			console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏!');
		} catch (error) {
			console.log('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ');
			console.log(`   –û—à–∏–±–∫–∞: ${error.message}\n`);
		}

		// –¢–µ—Å—Ç 4: –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
		console.log('üìà –¢–µ—Å—Ç 4: –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–æ–≤–∏');
		console.log('----------------------------------------');

		try {
			await veDonate.connect(deployer).addDonation(
				donor.address,
				'blood',
				1000, // –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
				'test-center'
			);
			console.log('‚ùå –û–®–ò–ë–ö–ê: –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏!');
		} catch (error) {
			console.log('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ');
			console.log(`   –û—à–∏–±–∫–∞: ${error.message}\n`);
		}

		// –¢–µ—Å—Ç 5: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–æ–Ω–∞—Ü–∏–∏
		console.log('‚ùì –¢–µ—Å—Ç 5: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–æ–Ω–∞—Ü–∏–∏');
		console.log('--------------------------------');

		try {
			await veDonate.connect(deployer).addDonation(
				donor.address,
				'urine', // –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø
				450,
				'test-center'
			);
			console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–æ–Ω–∞—Ü–∏–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏!');
		} catch (error) {
			console.log('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–æ–Ω–∞—Ü–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
			console.log(`   –û—à–∏–±–∫–∞: ${error.message}\n`);
		}

		// –¢–µ—Å—Ç 6: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ
		console.log('‚öñÔ∏è –¢–µ—Å—Ç 6: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è');
		console.log('----------------------------');

		try {
			// –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
			const tx1 = await veDonate.connect(deployer).addDonation(
				donor.address,
				'blood',
				200, // –ú–∏–Ω–∏–º—É–º
				'test-center-min'
			);
			await tx1.wait();
			console.log('‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (200 –º–ª) –ø—Ä–∏–Ω—è—Ç–æ');

			// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
			const tx2 = await veDonate.connect(deployer).addDonation(
				donor.address,
				'plasma',
				500, // –ú–∞–∫—Å–∏–º—É–º
				'test-center-max'
			);
			await tx2.wait();
			console.log('‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (500 –º–ª) –ø—Ä–∏–Ω—è—Ç–æ\n');
		} catch (error) {
			console.log('‚ùå –û—à–∏–±–∫–∞ —Å –≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:', error.message);
		}

		// –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≥—Ä–∞–¥ –ø–æ—Å–ª–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
		console.log('üí∞ –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≥—Ä–∞–¥ –ø–æ—Å–ª–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤');
		console.log('---------------------------------------------');

		const donorInfo = await veDonate.getDonorInfo(donor.address);
		const b3trBalance = await b3trToken.balanceOf(donor.address);
		const badges = await donorBadges.getDonorBadges(donor.address);

		console.log('üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
		console.log(`- –í—Å–µ–≥–æ –¥–æ–Ω–∞—Ü–∏–π: ${donorInfo.totalDonations}`);
		console.log(`- B3TR –±–∞–ª–∞–Ω—Å: ${ethers.formatEther(b3trBalance)} B3TR`);
		console.log(`- NFT –±–µ–π–¥–∂–∏: ${badges.length}`);

		// –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π
		console.log('\nüì° –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π');
		console.log('----------------------------');

		// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
		const donations = await veDonate.getDonorDonations(donor.address);
		console.log(`- –í—Å–µ–≥–æ –¥–æ–Ω–∞—Ü–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: ${donations.length}`);

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–π –¥–æ–Ω–∞—Ü–∏–∏
		for (let i = 0; i < donations.length; i++) {
			const donationInfo = await veDonate.getDonationInfo(donations[i]);
			console.log(
				`  ${i + 1}. ${donationInfo.donationType} - ${
					donationInfo.amount
				} –º–ª - ${ethers.formatEther(donationInfo.b3trReward)} B3TR`
			);
		}

		// –¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
		console.log('\nüîê –¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
		console.log('--------------------------------');

		try {
			// –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–Ω–æ—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ü–∏—é —Å–∞–º–æ–º—É —Å–µ–±–µ
			await veDonate
				.connect(donor)
				.addDonation(donor.address, 'blood', 450, 'test-center');
			console.log('‚ùå –û–®–ò–ë–ö–ê: –î–æ–Ω–æ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–ª—è—Ç—å –¥–æ–Ω–∞—Ü–∏–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ!');
		} catch (error) {
			console.log(
				'‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –¥–æ–Ω–∞—Ü–∏–∏'
			);
			console.log(`   –û—à–∏–±–∫–∞: ${error.message}\n`);
		}

		console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
		console.log('\nüìã –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:');
		console.log('‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ');
		console.log('‚úÖ –î–æ–Ω–∞—Ü–∏–∏ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã');
		console.log('‚úÖ –ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã');
		console.log('‚úÖ –ù–µ–≤–µ—Ä–Ω—ã–µ —Ç–∏–ø—ã –¥–æ–Ω–∞—Ü–∏–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã');
		console.log('‚úÖ –ì—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
		console.log('‚úÖ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
		console.log('‚úÖ –°–æ–±—ã—Ç–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
	} catch (error) {
		console.error('üí• –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤:', error);
		throw error;
	}
}

edgeCaseTests()
	.then(() => process.exit(0))
	.catch((error) => {
		console.error('üí• –¢–µ—Å—Ç—ã –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å:', error);
		process.exit(1);
	});
