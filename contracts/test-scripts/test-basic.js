const { ethers } = require('hardhat');

/**
 * üß™ –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ VeDonate
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –¥–æ–Ω–∞—Ü–∏–∏, –Ω–∞–≥—Ä–∞–¥—ã
 */

async function basicTests() {
	console.log('üöÄ –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ VeDonate...\n');

	const [deployer, donor1, donor2] = await ethers.getSigners();

	// ‚úÖ –ê–¥—Ä–µ—Å–∞ –¥–µ–ø–ª–æ–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ VeChain Testnet
	const VEDONATE_ADDRESS = '0x3e445638b907d942c33b904d6ea6951ac533bc34';
	const B3TR_ADDRESS = '0x3e0d2d748f66a56b3ed4d1afbe2e63a9db2844c3';
	const BADGES_ADDRESS = '0x9575e91189e60b4e9a41f136c87d177e42296a88';

	console.log('üë§ –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:');
	console.log('- Deployer:', deployer.address);
	console.log('- Donor 1:', donor1.address);
	console.log('- Donor 2:', donor2.address);
	console.log('');

	try {
		// –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
		console.log('üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤...');
		const veDonate = await ethers.getContractAt('VeDonate', VEDONATE_ADDRESS);
		const b3trToken = await ethers.getContractAt('B3TRToken', B3TR_ADDRESS);
		const donorBadges = await ethers.getContractAt(
			'DonorBadges',
			BADGES_ADDRESS
		);
		console.log('‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã\n');

		// –¢–µ—Å—Ç 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–Ω–æ—Ä–æ–≤
		console.log('üìù –¢–µ—Å—Ç 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–Ω–æ—Ä–æ–≤');
		console.log('--------------------------------');

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Donor 1
		const isRegistered1 = await veDonate.isDonorRegistered(donor1.address);
		if (!isRegistered1) {
			const tx1 = await veDonate.connect(donor1).registerDonor();
			await tx1.wait();
			console.log('‚úÖ Donor 1 –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
		} else {
			console.log('‚úÖ Donor 1 —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Donor 2
		const isRegistered2 = await veDonate.isDonorRegistered(donor2.address);
		if (!isRegistered2) {
			const tx2 = await veDonate.connect(donor2).registerDonor();
			await tx2.wait();
			console.log('‚úÖ Donor 2 –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
		} else {
			console.log('‚úÖ Donor 2 —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
		}
		console.log('');

		// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		console.log('üîç –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
		console.log('--------------------------------');

		const isRegistered1Check = await veDonate.isDonorRegistered(donor1.address);
		const isRegistered2Check = await veDonate.isDonorRegistered(donor2.address);

		console.log(`Donor 1 –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${isRegistered1Check}`);
		console.log(`Donor 2 –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${isRegistered2Check}\n`);

		// –¢–µ—Å—Ç 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–Ω–∞—Ü–∏–π
		console.log('ü©∏ –¢–µ—Å—Ç 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–Ω–∞—Ü–∏–π');
		console.log('--------------------------------');

		// –î–æ–Ω–∞—Ü–∏—è –∫—Ä–æ–≤–∏
		const tx3 = await veDonate
			.connect(deployer)
			.addDonation(donor1.address, 'blood', 450, 'test-center-001');
		await tx3.wait();
		console.log('‚úÖ Donor 1: –¥–æ–Ω–∞—Ü–∏—è –∫—Ä–æ–≤–∏ (450 –º–ª)');

		// –î–æ–Ω–∞—Ü–∏—è –ø–ª–∞–∑–º—ã
		const tx4 = await veDonate
			.connect(deployer)
			.addDonation(donor2.address, 'plasma', 450, 'test-center-002');
		await tx4.wait();
		console.log('‚úÖ Donor 2: –¥–æ–Ω–∞—Ü–∏—è –ø–ª–∞–∑–º—ã (450 –º–ª)\n');

		// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≥—Ä–∞–¥
		console.log('üí∞ –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≥—Ä–∞–¥');
		console.log('--------------------------------');

		// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–Ω–æ—Ä–∞—Ö
		const donor1Info = await veDonate.getDonorInfo(donor1.address);
		const donor2Info = await veDonate.getDonorInfo(donor2.address);

		// –ë–∞–ª–∞–Ω—Å—ã B3TR
		const b3trBalance1 = await b3trToken.balanceOf(donor1.address);
		const b3trBalance2 = await b3trToken.balanceOf(donor2.address);

		// –ë–µ–π–¥–∂–∏
		const badges1 = await donorBadges.getDonorBadges(donor1.address);
		const badges2 = await donorBadges.getDonorBadges(donor2.address);

		console.log('üìä Donor 1 —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
		console.log(`- –í—Å–µ–≥–æ –¥–æ–Ω–∞—Ü–∏–π: ${donor1Info.totalDonations}`);
		console.log(`- –ü–ª–∞–∑–º–∞ –¥–æ–Ω–∞—Ü–∏–π: ${donor1Info.plasmaDonations}`);
		console.log(`- B3TR –±–∞–ª–∞–Ω—Å: ${ethers.formatEther(b3trBalance1)} B3TR`);
		console.log(`- NFT –±–µ–π–¥–∂–∏: ${badges1.length}`);

		console.log('\nüìä Donor 2 —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
		console.log(`- –í—Å–µ–≥–æ –¥–æ–Ω–∞—Ü–∏–π: ${donor2Info.totalDonations}`);
		console.log(`- –ü–ª–∞–∑–º–∞ –¥–æ–Ω–∞—Ü–∏–π: ${donor2Info.plasmaDonations}`);
		console.log(`- B3TR –±–∞–ª–∞–Ω—Å: ${ethers.formatEther(b3trBalance2)} B3TR`);
		console.log(`- NFT –±–µ–π–¥–∂–∏: ${badges2.length}\n`);

		// –¢–µ—Å—Ç 5: –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
		console.log('üìà –¢–µ—Å—Ç 5: –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
		console.log('--------------------------------');

		const globalStats = await veDonate.getGlobalStats();
		console.log(`- –í—Å–µ–≥–æ –¥–æ–Ω–∞—Ü–∏–π: ${globalStats.totalDonations}`);
		console.log(`- –í—Å–µ–≥–æ –¥–æ–Ω–æ—Ä–æ–≤: ${globalStats.totalDonors}`);
		console.log(
			`- B3TR —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: ${
				globalStats.totalB3TRDistributed
					? ethers.formatEther(globalStats.totalB3TRDistributed)
					: '0'
			} B3TR\n`
		);

		// –¢–µ—Å—Ç 6: –ò—Å—Ç–æ—Ä–∏—è –¥–æ–Ω–∞—Ü–∏–π
		console.log('üìú –¢–µ—Å—Ç 6: –ò—Å—Ç–æ—Ä–∏—è –¥–æ–Ω–∞—Ü–∏–π');
		console.log('--------------------------------');

		const donations1 = await veDonate.getDonorDonations(donor1.address);
		const donations2 = await veDonate.getDonorDonations(donor2.address);

		console.log(`Donor 1 –¥–æ–Ω–∞—Ü–∏–π: ${donations1.length}`);
		console.log(`Donor 2 –¥–æ–Ω–∞—Ü–∏–π: ${donations2.length}`);

		// –î–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤–æ–π –¥–æ–Ω–∞—Ü–∏–∏
		if (donations1.length > 0) {
			const donationInfo = await veDonate.getDonationInfo(donations1[0]);
			console.log('\nüîç –î–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤–æ–π –¥–æ–Ω–∞—Ü–∏–∏ Donor 1:');
			console.log(`- –¢–∏–ø: ${donationInfo.donationType}`);
			console.log(`- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${donationInfo.amount} –º–ª`);
			console.log(`- –¶–µ–Ω—Ç—Ä: ${donationInfo.centerId}`);
			console.log(
				`- B3TR –Ω–∞–≥—Ä–∞–¥–∞: ${ethers.formatEther(donationInfo.b3trReward)}`
			);
			console.log(`- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: ${donationInfo.verified}`);
		}

		console.log('\nüéâ –í—Å–µ –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
		console.log('\nüìã –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:');
		console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–Ω–æ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');
		console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–Ω–∞—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç');
		console.log('‚úÖ B3TR —Ç–æ–∫–µ–Ω—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
		console.log('‚úÖ NFT –±–µ–π–¥–∂–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è');
		console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è');
		console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–æ–Ω–∞—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è');
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error);
		throw error;
	}
}

basicTests()
	.then(() => process.exit(0))
	.catch((error) => {
		console.error('üí• –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å:', error);
		process.exit(1);
	});
