const { ethers } = require('hardhat');

/**
 * ‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π VeDonate
 * –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
 */

async function quickTest() {
	console.log('‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç VeDonate...\n');

	// ‚úÖ –ê–¥—Ä–µ—Å–∞ –¥–µ–ø–ª–æ–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ VeChain Testnet
	const VEDONATE_ADDRESS = '0x3e445638b907d942c33b904d6ea6951ac533bc34';
	const B3TR_ADDRESS = '0x3e0d2d748f66a56b3ed4d1afbe2e63a9db2844c3';
	const BADGES_ADDRESS = '0x9575e91189e60b4e9a41f136c87d177e42296a88';

	const signers = await ethers.getSigners();
	const deployer = signers[0];
	const donor = signers[2]; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–µ—Ç–∏–π –∞–∫–∫–∞—É–Ω—Ç –≤–º–µ—Å—Ç–æ –≤—Ç–æ—Ä–æ–≥–æ

	console.log('üë§ –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–Ω–æ—Ä:', donor.address);
	console.log('üîß –î–µ–ø–ª–æ–π–µ—Ä:', deployer.address);
	console.log('');

	try {
		// –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
		const veDonate = await ethers.getContractAt('VeDonate', VEDONATE_ADDRESS);
		const b3trToken = await ethers.getContractAt('B3TRToken', B3TR_ADDRESS);
		const donorBadges = await ethers.getContractAt(
			'DonorBadges',
			BADGES_ADDRESS
		);

		// –®–∞–≥ 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–Ω–æ—Ä–∞ (–µ—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)
		console.log('üìù 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ–Ω–æ—Ä–∞...');
		try {
			const donorInfo = await veDonate.getDonorInfo(donor.address);
			if (donorInfo.isRegistered) {
				console.log('‚úÖ –î–æ–Ω–æ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
			} else {
				const regTx = await veDonate.connect(donor).registerDonor();
				await regTx.wait();
				console.log('‚úÖ –î–æ–Ω–æ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
			}
		} catch (error) {
			// –ï—Å–ª–∏ –¥–æ–Ω–æ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
			const regTx = await veDonate.connect(donor).registerDonor();
			await regTx.wait();
			console.log('‚úÖ –î–æ–Ω–æ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
		}

		// –®–∞–≥ 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–Ω–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
		console.log('ü©∏ 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–Ω–∞—Ü–∏–π...');
		const currentDonorInfo = await veDonate.getDonorInfo(donor.address);
		const currentDonations = currentDonorInfo.totalDonations;

		if (currentDonations < 1) {
			console.log('   –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –¥–æ–Ω–∞—Ü–∏—é...');
			const donationTx = await veDonate
				.connect(deployer)
				.addDonation(donor.address, 'blood', 450, 'quick-test-center');
			await donationTx.wait();
			console.log('‚úÖ –î–æ–Ω–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞');
		} else {
			console.log(`‚úÖ –£ –¥–æ–Ω–æ—Ä–∞ —É–∂–µ –µ—Å—Ç—å ${currentDonations} –¥–æ–Ω–∞—Ü–∏–π`);
		}

		// –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
		console.log('üìä 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');

		// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–Ω–æ—Ä–µ
		const updatedDonorInfo = await veDonate.getDonorInfo(donor.address);
		const b3trBalance = await b3trToken.balanceOf(donor.address);
		const badges = await donorBadges.getDonorBadges(donor.address);

		console.log('');
		console.log('üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:');
		console.log(`   üë§ –î–æ–Ω–∞—Ü–∏–π: ${updatedDonorInfo.totalDonations}`);
		console.log(`   üí∞ B3TR: ${ethers.formatEther(b3trBalance)}`);
		console.log(`   üèÜ –ë–µ–π–¥–∂–µ–π: ${badges.length}`);

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ - —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		const expectedDonations = updatedDonorInfo.totalDonations.toString();
		const expectedB3TR = b3trBalance.toString();
		const expectedBadges = badges.length;

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–Ω–æ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –∏–º–µ–µ—Ç –¥–æ–Ω–∞—Ü–∏–∏
		const isSuccess =
			updatedDonorInfo.isRegistered &&
			parseInt(expectedDonations) >= 1 &&
			parseInt(expectedB3TR) >= 10000000000000000000 && // –º–∏–Ω–∏–º—É–º 10 B3TR
			expectedBadges >= 1;

		if (isSuccess) {
			console.log('');
			console.log('üéâ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! ‚úÖ');
			console.log('–í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
		} else {
			console.log('');
			console.log('‚ùå –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù!');
			console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∏ –∞–¥—Ä–µ—Å–∞');
		}
	} catch (error) {
		console.error('');
		console.error('üí• –û—à–∏–±–∫–∞ –≤ –±—ã—Å—Ç—Ä–æ–º —Ç–µ—Å—Ç–µ:', error.message);
		console.error('');
		console.error('üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
		console.error('   1. –ù–µ–≤–µ—Ä–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤');
		console.error('   2. –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –Ω–µ –∑–∞–¥–µ–ø–ª–æ–µ–Ω—ã');
		console.error('   3. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ VET –¥–ª—è –≥–∞–∑–∞');
		console.error('   4. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–µ—Ç—å (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å VeChain Testnet)');
		console.error('');
		console.error('üìñ –†–µ—à–µ–Ω–∏–µ:');
		console.error('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å–∞ –≤ CONTRACT_ADDRESSES');
		console.error(
			'   2. –ó–∞–¥–µ–ø–ª–æ–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∫–æ–º–∞–Ω–¥–æ–π: npm run deploy:testnet'
		);
		console.error('   3. –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ VET: https://faucet.vecha.in/');
		throw error;
	}
}

quickTest()
	.then(() => process.exit(0))
	.catch((error) => {
		console.error('üí• –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è');
		process.exit(1);
	});
