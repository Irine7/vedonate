const { ethers } = require('hardhat');

/**
 * üèÜ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã NFT –±–µ–π–¥–∂–µ–π
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–µ–π–¥–∂–µ–π –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
 */

async function badgeTests() {
	console.log('üèÜ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ NFT –±–µ–π–¥–∂–µ–π...\n');

	const [deployer, donor] = await ethers.getSigners();

	// ‚úÖ –ê–¥—Ä–µ—Å–∞ –¥–µ–ø–ª–æ–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ VeChain Testnet
	const VEDONATE_ADDRESS = '0x3e445638b907d942c33b904d6ea6951ac533bc34';
	const B3TR_ADDRESS = '0x3e0d2d748f66a56b3ed4d1afbe2e63a9db2844c3';
	const BADGES_ADDRESS = '0x9575e91189e60b4e9a41f136c87d177e42296a88';

	try {
		const veDonate = await ethers.getContractAt('VeDonate', VEDONATE_ADDRESS);
		const b3trToken = await ethers.getContractAt('B3TRToken', B3TR_ADDRESS);
		const donorBadges = await ethers.getContractAt(
			'DonorBadges',
			BADGES_ADDRESS
		);

		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–Ω–æ—Ä–∞ (–µ—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)
		console.log('üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–Ω–æ—Ä–∞...');
		const isRegistered = await veDonate.isDonorRegistered(donor.address);
		if (!isRegistered) {
			const regTx = await veDonate.connect(donor).registerDonor();
			await regTx.wait();
			console.log('‚úÖ –î–æ–Ω–æ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
		} else {
			console.log('‚úÖ –î–æ–Ω–æ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
		}
		console.log('');

		// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–π–¥–∂–µ–π
		const checkBadges = async (expectedCount, milestone) => {
			const badges = await donorBadges.getDonorBadges(donor.address);
			console.log(`üìä –ü–æ—Å–ª–µ ${milestone}: ${badges.length} –±–µ–π–¥–∂–µ–π`);

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –±–µ–π–¥–∂
			for (let i = 0; i < badges.length; i++) {
				const tokenId = badges[i];
				const tokenURI = await donorBadges.tokenURI(tokenId);
				console.log(
					`   üèÜ –ë–µ–π–¥–∂ ${i + 1}: ID ${tokenId} - ${tokenURI.substring(
						0,
						50
					)}...`
				);
			}

			if (badges.length === expectedCount) {
				console.log(`‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ: ${expectedCount} –±–µ–π–¥–∂–µ–π –ø–æ–ª—É—á–µ–Ω–æ`);
			} else {
				console.log(
					`‚ùå –û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å ${expectedCount}, –ø–æ–ª—É—á–µ–Ω–æ ${badges.length}`
				);
			}
			console.log('');
		};

		// –¢–µ—Å—Ç 1: –ü–µ—Ä–≤–∞—è –¥–æ–Ω–∞—Ü–∏—è - –±–µ–π–¥–∂ "–ü–µ—Ä–≤–∞—è –¥–æ–Ω–∞—Ü–∏—è"
		console.log('ü•â –¢–µ—Å—Ç 1: –ü–µ—Ä–≤–∞—è –¥–æ–Ω–∞—Ü–∏—è');
		console.log('------------------------');

		const tx1 = await veDonate
			.connect(deployer)
			.addDonation(donor.address, 'blood', 450, 'center-001');
		await tx1.wait();
		console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–≤–∞—è –¥–æ–Ω–∞—Ü–∏—è (–∫—Ä–æ–≤—å)');
		await checkBadges(1, '–ø–µ—Ä–≤–æ–π –¥–æ–Ω–∞—Ü–∏–∏');

		// –¢–µ—Å—Ç 2: –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 5 –¥–æ–Ω–∞—Ü–∏–π - –±–µ–π–¥–∂ "–ë—Ä–æ–Ω–∑–æ–≤—ã–π –¥–æ–Ω–æ—Ä"
		console.log('ü•â –¢–µ—Å—Ç 2: –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –±—Ä–æ–Ω–∑–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞');
		console.log('---------------------------------------');

		// –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ 4 –¥–æ–Ω–∞—Ü–∏–∏
		for (let i = 2; i <= 5; i++) {
			const tx = await veDonate
				.connect(deployer)
				.addDonation(
					donor.address,
					'blood',
					450,
					`center-${i.toString().padStart(3, '0')}`
				);
			await tx.wait();
			console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–æ–Ω–∞—Ü–∏—è ${i}/5`);
		}

		await checkBadges(2, '5 –¥–æ–Ω–∞—Ü–∏–π (–±—Ä–æ–Ω–∑–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å)');

		// –¢–µ—Å—Ç 3: –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 10 –¥–æ–Ω–∞—Ü–∏–π - –±–µ–π–¥–∂ "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –¥–æ–Ω–æ—Ä"
		console.log('ü•à –¢–µ—Å—Ç 3: –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å–µ—Ä–µ–±—Ä—è–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞');
		console.log('---------------------------------------');

		// –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ 5 –¥–æ–Ω–∞—Ü–∏–π
		for (let i = 6; i <= 10; i++) {
			const tx = await veDonate
				.connect(deployer)
				.addDonation(
					donor.address,
					'blood',
					450,
					`center-${i.toString().padStart(3, '0')}`
				);
			await tx.wait();
			console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–æ–Ω–∞—Ü–∏—è ${i}/10`);
		}

		await checkBadges(3, '10 –¥–æ–Ω–∞—Ü–∏–π (—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π —Å—Ç–∞—Ç—É—Å)');

		// –¢–µ—Å—Ç 4: –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 25 –¥–æ–Ω–∞—Ü–∏–π - –±–µ–π–¥–∂ "–ó–æ–ª–æ—Ç–æ–π –¥–æ–Ω–æ—Ä"
		console.log('ü•á –¢–µ—Å—Ç 4: –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–æ–ª–æ—Ç–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞');
		console.log('------------------------------------');

		// –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ 15 –¥–æ–Ω–∞—Ü–∏–π (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ - –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ 5 –∑–∞ —Ä–∞–∑)
		for (let batch = 0; batch < 3; batch++) {
			for (let i = 0; i < 5; i++) {
				const donationNumber = 11 + batch * 5 + i;
				const tx = await veDonate
					.connect(deployer)
					.addDonation(
						donor.address,
						'blood',
						450,
						`center-${donationNumber.toString().padStart(3, '0')}`
					);
				await tx.wait();
			}
			console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞—Ä—Ç–∏—è ${batch + 1}/3 –¥–æ–Ω–∞—Ü–∏–π`);
		}

		await checkBadges(4, '25 –¥–æ–Ω–∞—Ü–∏–π (–∑–æ–ª–æ—Ç–æ–π —Å—Ç–∞—Ç—É—Å)');

		// –¢–µ—Å—Ç 5: –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 50 –¥–æ–Ω–∞—Ü–∏–π - –±–µ–π–¥–∂ "–°–ø–∞—Å–∞—Ç–µ–ª—å –∂–∏–∑–Ω–µ–π"
		console.log('‚ù§Ô∏è –¢–µ—Å—Ç 5: –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ "–°–ø–∞—Å–∞—Ç–µ–ª—å –∂–∏–∑–Ω–µ–π"');
		console.log('--------------------------------------------');

		// –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ 25 –¥–æ–Ω–∞—Ü–∏–π (–ø–æ 5 –∑–∞ —Ä–∞–∑ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
		for (let batch = 0; batch < 5; batch++) {
			for (let i = 0; i < 5; i++) {
				const donationNumber = 26 + batch * 5 + i;
				const tx = await veDonate
					.connect(deployer)
					.addDonation(
						donor.address,
						'blood',
						450,
						`center-${donationNumber.toString().padStart(3, '0')}`
					);
				await tx.wait();
			}
			console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞—Ä—Ç–∏—è ${batch + 1}/5 –¥–æ–Ω–∞—Ü–∏–π`);
		}

		await checkBadges(5, '50 –¥–æ–Ω–∞—Ü–∏–π (—Å–ø–∞—Å–∞—Ç–µ–ª—å –∂–∏–∑–Ω–µ–π)');

		// –¢–µ—Å—Ç 6: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ–Ω–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–∑–º—ã
		console.log('üíß –¢–µ—Å—Ç 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–π–¥–∂–∞ "–ú–∞—Å—Ç–µ—Ä –ø–ª–∞–∑–º—ã"');
		console.log('-------------------------------------------');

		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –¥–æ–Ω–æ—Ä–∞
		const donor2Wallet = ethers.Wallet.createRandom().connect(ethers.provider);
		const regTx2 = await veDonate.connect(donor2Wallet).registerDonor();
		await regTx2.wait();
		console.log('‚úÖ –í—Ç–æ—Ä–æ–π –¥–æ–Ω–æ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');

		// –î–æ–±–∞–≤–ª—è–µ–º 10 –¥–æ–Ω–∞—Ü–∏–π –ø–ª–∞–∑–º—ã
		for (let i = 1; i <= 10; i++) {
			const tx = await veDonate
				.connect(deployer)
				.addDonation(
					donor2Wallet.address,
					'plasma',
					600,
					`plasma-center-${i.toString().padStart(3, '0')}`
				);
			await tx.wait();
			console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–æ–Ω–∞—Ü–∏—è –ø–ª–∞–∑–º—ã ${i}/10`);
		}

		const badges2 = await donorBadges.getDonorBadges(donor2Wallet.address);
		console.log(`üìä Donor 2 –±–µ–π–¥–∂–∏: ${badges2.length}`);

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–µ–π–¥–∂ "–ú–∞—Å—Ç–µ—Ä –ø–ª–∞–∑–º—ã"
		let hasPlasmaMaster = false;
		for (const tokenId of badges2) {
			const tokenURI = await donorBadges.tokenURI(tokenId);
			if (tokenURI.includes('Plasma Master')) {
				hasPlasmaMaster = true;
				console.log('‚úÖ –ë–µ–π–¥–∂ "–ú–∞—Å—Ç–µ—Ä –ø–ª–∞–∑–º—ã" –ø–æ–ª—É—á–µ–Ω!');
				break;
			}
		}

		if (!hasPlasmaMaster) {
			console.log('‚ùå –ë–µ–π–¥–∂ "–ú–∞—Å—Ç–µ—Ä –ø–ª–∞–∑–º—ã" –Ω–µ –Ω–∞–π–¥–µ–Ω');
		}

		// –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
		console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–π–¥–∂–µ–π');
		console.log('==========================================');

		const donorInfo = await veDonate.getDonorInfo(donor.address);
		const donor2Info = await veDonate.getDonorInfo(donor2Wallet.address);

		console.log('üë§ Donor 1 (–∫—Ä–æ–≤—å):');
		console.log(`- –í—Å–µ–≥–æ –¥–æ–Ω–∞—Ü–∏–π: ${donorInfo.totalDonations}`);
		console.log(`- –ü–ª–∞–∑–º–∞ –¥–æ–Ω–∞—Ü–∏–π: ${donorInfo.plasmaDonations}`);
		console.log(
			`- –ë–µ–π–¥–∂–∏: ${(await donorBadges.getDonorBadges(donor.address)).length}`
		);

		console.log('\nüë§ Donor 2 (–ø–ª–∞–∑–º–∞):');
		console.log(`- –í—Å–µ–≥–æ –¥–æ–Ω–∞—Ü–∏–π: ${donor2Info.totalDonations}`);
		console.log(`- –ü–ª–∞–∑–º–∞ –¥–æ–Ω–∞—Ü–∏–π: ${donor2Info.plasmaDonations}`);
		console.log(
			`- –ë–µ–π–¥–∂–∏: ${
				(await donorBadges.getDonorBadges(donor2Wallet.address)).length
			}`
		);

		// –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–π–¥–∂–µ–π
		console.log('\nüîÑ –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–π–¥–∂–µ–π');
		console.log('-------------------------------------');

		// –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –¥–æ–Ω–∞—Ü–∏—é
		const txExtra = await veDonate
			.connect(deployer)
			.addDonation(donor.address, 'blood', 450, 'center-extra');
		await txExtra.wait();

		const finalBadges = await donorBadges.getDonorBadges(donor.address);
		console.log(
			`üìä –ë–µ–π–¥–∂–µ–π –ø–æ—Å–ª–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ–Ω–∞—Ü–∏–∏: ${finalBadges.length}`
		);

		if (finalBadges.length === 5) {
			console.log('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–π–¥–∂–µ–π –Ω–µ—Ç');
		} else {
			console.log('‚ùå –û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–π–¥–∂–µ–π –∏–∑–º–µ–Ω–∏–ª–æ—Å—å');
		}

		console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã NFT –±–µ–π–¥–∂–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
		console.log('\nüìã –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:');
		console.log('‚úÖ –ë–µ–π–¥–∂ "–ü–µ—Ä–≤–∞—è –¥–æ–Ω–∞—Ü–∏—è" —Ä–∞–±–æ—Ç–∞–µ—Ç');
		console.log('‚úÖ –ë–µ–π–¥–∂ "–ë—Ä–æ–Ω–∑–æ–≤—ã–π –¥–æ–Ω–æ—Ä" —Ä–∞–±–æ—Ç–∞–µ—Ç');
		console.log('‚úÖ –ë–µ–π–¥–∂ "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –¥–æ–Ω–æ—Ä" —Ä–∞–±–æ—Ç–∞–µ—Ç');
		console.log('‚úÖ –ë–µ–π–¥–∂ "–ó–æ–ª–æ—Ç–æ–π –¥–æ–Ω–æ—Ä" —Ä–∞–±–æ—Ç–∞–µ—Ç');
		console.log('‚úÖ –ë–µ–π–¥–∂ "–°–ø–∞—Å–∞—Ç–µ–ª—å –∂–∏–∑–Ω–µ–π" —Ä–∞–±–æ—Ç–∞–µ—Ç');
		console.log('‚úÖ –ë–µ–π–¥–∂ "–ú–∞—Å—Ç–µ—Ä –ø–ª–∞–∑–º—ã" —Ä–∞–±–æ—Ç–∞–µ—Ç');
		console.log('‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–π–¥–∂–µ–π –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ');
		console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
	} catch (error) {
		console.error('üí• –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –±–µ–π–¥–∂–µ–π:', error);
		throw error;
	}
}

badgeTests()
	.then(() => process.exit(0))
	.catch((error) => {
		console.error('üí• –¢–µ—Å—Ç—ã –±–µ–π–¥–∂–µ–π –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å:', error);
		process.exit(1);
	});
