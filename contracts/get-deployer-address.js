const { ethers } = require('hardhat');

/**
 * üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–µ–ø–ª–æ–π–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö VET —Ç–æ–∫–µ–Ω–æ–≤
 */

async function getDeployerAddress() {
	console.log('üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–µ–ø–ª–æ–π–µ—Ä–∞...\n');

	try {
		// –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ hardhat –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
		const [deployer, donor1, donor2] = await ethers.getSigners();

		console.log('üìã –ê–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
		console.log('=============================');
		console.log(`üë§ –î–µ–ø–ª–æ–π–µ—Ä (index 0): ${deployer.address}`);
		console.log(`üë§ –î–æ–Ω–æ—Ä 1 (index 1):  ${donor1.address}`);
		console.log(`üë§ –î–æ–Ω–æ—Ä 2 (index 2):  ${donor2.address}`);
		console.log('');

		console.log('üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤:');
		console.log('=====================');

		const deployerBalance = await ethers.provider.getBalance(deployer.address);
		const donor1Balance = await ethers.provider.getBalance(donor1.address);
		const donor2Balance = await ethers.provider.getBalance(donor2.address);

		console.log(`üí∞ –î–µ–ø–ª–æ–π–µ—Ä: ${ethers.formatEther(deployerBalance)} VET`);
		console.log(`üí∞ –î–æ–Ω–æ—Ä 1:  ${ethers.formatEther(donor1Balance)} VET`);
		console.log(`üí∞ –î–æ–Ω–æ—Ä 2:  ${ethers.formatEther(donor2Balance)} VET`);
		console.log('');

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–º—É –Ω—É–∂–Ω—ã —Ç–æ–∫–µ–Ω—ã
		const minBalance = ethers.parseEther('1'); // –ú–∏–Ω–∏–º—É–º 1 VET –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

		console.log('üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
		console.log('================');

		if (deployerBalance < minBalance) {
			console.log(`‚ö†Ô∏è  –î–µ–ø–ª–æ–π–µ—Ä—É –Ω—É–∂–Ω—ã VET —Ç–æ–∫–µ–Ω—ã!`);
			console.log(`üìç –ê–¥—Ä–µ—Å –¥–ª—è faucet: ${deployer.address}`);
			console.log('');
		}

		if (donor1Balance < minBalance) {
			console.log(`‚ö†Ô∏è  –î–æ–Ω–æ—Ä—É 1 –Ω—É–∂–Ω—ã VET —Ç–æ–∫–µ–Ω—ã!`);
			console.log(`üìç –ê–¥—Ä–µ—Å –¥–ª—è faucet: ${donor1.address}`);
			console.log('');
		}

		if (donor2Balance < minBalance) {
			console.log(`‚ö†Ô∏è  –î–æ–Ω–æ—Ä—É 2 –Ω—É–∂–Ω—ã VET —Ç–æ–∫–µ–Ω—ã!`);
			console.log(`üìç –ê–¥—Ä–µ—Å –¥–ª—è faucet: ${donor2.address}`);
			console.log('');
		}

		if (
			deployerBalance >= minBalance &&
			donor1Balance >= minBalance &&
			donor2Balance >= minBalance
		) {
			console.log('‚úÖ –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å VET!');
			console.log('üöÄ –ì–æ—Ç–æ–≤–æ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!');
		} else {
			console.log('üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:');
			console.log('==============');
			console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ https://faucet.vechain.org/');
			console.log('2. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å(–∞) –≤—ã—à–µ');
			console.log('3. –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ VET —Ç–æ–∫–µ–Ω—ã');
			console.log('4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: npm run test:all');
		}

		console.log('');
		console.log('üîó –°—Å—ã–ª–∫–∏:');
		console.log('==========');
		console.log('‚Ä¢ VeChain Faucet: https://faucet.vechain.org/');
		console.log(
			'‚Ä¢ VeChain Testnet Explorer: https://explore-testnet.vechain.org/'
		);

		// –í—ã–≤–æ–¥–∏–º –∞–¥—Ä–µ—Å –¥–µ–ø–ª–æ–π–µ—Ä–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
		console.log('');
		console.log('üìã –ö–û–ü–ò–†–£–ô–¢–ï –≠–¢–û–¢ –ê–î–†–ï–° –î–õ–Ø FAUCET:');
		console.log('=====================================');
		console.log(deployer.address);
		console.log('=====================================');
	} catch (error) {
		console.error('üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤:', error);
		throw error;
	}
}

getDeployerAddress()
	.then(() => process.exit(0))
	.catch((error) => {
		console.error('üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
		process.exit(1);
	});
