const { ethers } = require('hardhat');

async function main() {
	console.log('üöÄ –î–µ–ø–ª–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ VeDonate –≤ VeChain Testnet...');

	// –ü–æ–ª—É—á–∞–µ–º –¥–µ–ø–ª–æ–π–µ—Ä–∞
	const [deployer] = await ethers.getSigners();
	console.log('–î–µ–ø–ª–æ–π —Å –∞–¥—Ä–µ—Å–∞:', deployer.address);
	console.log(
		'–ë–∞–ª–∞–Ω—Å:',
		ethers.formatEther(await ethers.provider.getBalance(deployer.address)),
		'VET'
	);

	// 1. –î–µ–ø–ª–æ–π B3TR Token
	console.log('\nüìÑ –î–µ–ø–ª–æ–π B3TR Token...');
	const B3TRToken = await ethers.getContractFactory('B3TRToken');
	const b3trToken = await B3TRToken.deploy();
	await b3trToken.waitForDeployment();
	const b3trAddress = await b3trToken.getAddress();
	console.log('‚úÖ B3TR Token –¥–µ–ø–ª–æ–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:', b3trAddress);

	// 2. –î–µ–ø–ª–æ–π Donor Badges NFT
	console.log('\nüèÜ –î–µ–ø–ª–æ–π Donor Badges NFT...');
	const DonorBadges = await ethers.getContractFactory('DonorBadges');
	const donorBadges = await DonorBadges.deploy();
	await donorBadges.waitForDeployment();
	const badgesAddress = await donorBadges.getAddress();
	console.log('‚úÖ Donor Badges –¥–µ–ø–ª–æ–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:', badgesAddress);

	// 3. –î–µ–ø–ª–æ–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ VeDonate
	console.log('\nü©∏ –î–µ–ø–ª–æ–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ VeDonate...');
	const VeDonate = await ethers.getContractFactory('VeDonate');
	const veDonate = await VeDonate.deploy(b3trAddress, badgesAddress);
	await veDonate.waitForDeployment();
	const veDonateAddress = await veDonate.getAddress();
	console.log('‚úÖ VeDonate –¥–µ–ø–ª–æ–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:', veDonateAddress);

	// 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
	console.log('\nüîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...');

	// –î–∞–µ–º –ø—Ä–∞–≤–∞ VeDonate –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É –Ω–∞ –º–∏–Ω—Ç —Ç–æ–∫–µ–Ω–æ–≤
	const setB3TROwner = await b3trToken.transferOwnership(veDonateAddress);
	await setB3TROwner.wait();
	console.log('‚úÖ B3TR Token ownership –ø–µ—Ä–µ–¥–∞–Ω VeDonate –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É');

	// –î–∞–µ–º –ø—Ä–∞–≤–∞ VeDonate –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É –Ω–∞ –º–∏–Ω—Ç NFT
	const setBadgesOwner = await donorBadges.transferOwnership(veDonateAddress);
	await setBadgesOwner.wait();
	console.log('‚úÖ Donor Badges ownership –ø–µ—Ä–µ–¥–∞–Ω VeDonate –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É');

	// 5. –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
	console.log('\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:');
	console.log('const CONTRACT_ADDRESSES = {');
	console.log(`  B3TR_TOKEN: "${b3trAddress}",`);
	console.log(`  DONOR_BADGES: "${badgesAddress}",`);
	console.log(`  VEDONATE: "${veDonateAddress}"`);
	console.log('};');

	console.log('\nüéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
	console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–ø–ª–æ—è:');
	console.log('- B3TR Token:', b3trAddress);
	console.log('- Donor Badges:', badgesAddress);
	console.log('- VeDonate:', veDonateAddress);
	console.log('- Network: VeChain Testnet');
	console.log('- Deployer:', deployer.address);

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å B3TR
	const b3trBalance = await b3trToken.balanceOf(deployer.address);
	console.log(
		'- Initial B3TR balance:',
		ethers.formatEther(b3trBalance),
		'B3TR'
	);

	return {
		b3trToken: b3trAddress,
		donorBadges: badgesAddress,
		veDonate: veDonateAddress,
	};
}

main()
	.then(() => process.exit(0))
	.catch((error) => {
		console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è:', error);
		process.exit(1);
	});
