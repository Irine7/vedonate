'use client';

import React, { useState } from 'react';
import {
	Box,
	Card,
	CardBody,
	VStack,
	HStack,
	Heading,
	Text,
	Button,
	useColorModeValue,
	Badge,
	Grid,
	GridItem,
	Flex,
	Spacer,
	Modal,
	ModalOverlay,
	ModalContent,
	ModalHeader,
	ModalBody,
	ModalCloseButton,
	useDisclosure,
	FormControl,
	FormLabel,
	Input,
	Select,
	NumberInput,
	NumberInputField,
	NumberInputStepper,
	NumberIncrementStepper,
	NumberDecrementStepper,
	useToast,
	Divider,
	Icon,
} from '@chakra-ui/react';
import { useVeDonate } from '@/hooks/useVeDonate';
import { useSafeWallet } from '@/hooks/useSafeWallet';

interface NewDonorWelcomeProps {
	account: string;
}

export function NewDonorWelcome({ account }: NewDonorWelcomeProps) {
	const { registerDonor, addDonation, isLoading, isDeployer, refreshData } =
		useVeDonate();
	const { connection, connect } = useSafeWallet();
	const { isOpen, onOpen, onClose } = useDisclosure();
	const toast = useToast();

	const [donationForm, setDonationForm] = useState({
		donationType: 'blood',
		amount: 450,
		centerId: '',
	});

	const [profileForm, setProfileForm] = useState({
		firstName: '',
		lastName: '',
		email: '',
		phone: '',
	});

	const cardBg = useColorModeValue('white', 'gray.800');
	const textColor = useColorModeValue('gray.800', 'white');
	const subtextColor = useColorModeValue('gray.600', 'gray.300');
	const borderColor = useColorModeValue('gray.200', 'gray.600');

	const formatAddress = (address: string) => {
		if (!address || typeof address !== 'string') {
			return 'N/A';
		}
		return `${address.slice(0, 6)}...${address.slice(-4)}`;
	};

	const handleForceReconnect = async () => {
		try {
			toast({
				title: '–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...',
				description: '–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VeChain Thor',
				status: 'info',
				duration: 3000,
				isClosable: true,
				position: 'bottom-left',
			});

			// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
			await refreshData();

			toast({
				title: '–û–±–Ω–æ–≤–ª–µ–Ω–æ',
				description: '–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ',
				status: 'success',
				duration: 2000,
				isClosable: true,
				position: 'bottom-left',
			});
		} catch (err) {
			console.error('Force reconnect error:', err);
			toast({
				title: '–û—à–∏–±–∫–∞',
				description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ',
				status: 'error',
				duration: 3000,
				isClosable: true,
				position: 'bottom-left',
			});
		}
	};

	const handleDirectVeWorldRegistration = async () => {
		try {
			toast({
				title: '–ü—Ä—è–º–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...',
				description: '–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ VeWorld API',
				status: 'info',
				duration: 3000,
				isClosable: true,
				position: 'bottom-left',
			});

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö VeWorld API
			const vechainApi =
				(window as any).vechain ||
				(window as any).veworldKit ||
				(window as any).veworld;

			if (typeof window !== 'undefined' && vechainApi) {
				console.log(
					'VeChain API found:',
					vechainApi.constructor.name,
					'attempting direct registration...'
				);

				// –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤—ã–∑–æ–≤–∞
				let result;
				if (vechainApi.sendTransaction) {
					result = await vechainApi.sendTransaction({
						clauses: [
							{
								to: '0x3e445638b907d942c33b904d6ea6951ac533bc34',
								value: '0x0',
								data: '0x5b34c965', // registerDonor() selector
							},
						],
						gas: 100000,
						gasPriceCoef: 128,
						dependsOn: null,
						nonce: Math.floor(Math.random() * 1000000000),
					});
				} else if (vechainApi.request) {
					// –î–ª—è wallet API
					result = await vechainApi.request({
						method: 'vechain_sendTransaction',
						params: [
							{
								clauses: [
									{
										to: '0x3e445638b907d942c33b904d6ea6951ac533bc34',
										value: '0x0',
										data: '0x5b34c965',
									},
								],
								gas: 100000,
								gasPriceCoef: 128,
							},
						],
					});
				} else {
					throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π API VeWorld');
				}

				console.log('Direct VeChain registration successful:', result);

				toast({
					title: '–£—Å–ø–µ—à–Ω–æ!',
					description: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ VeWorld –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ',
					status: 'success',
					duration: 3000,
					isClosable: true,
					position: 'bottom-left',
				});

				// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
				await refreshData();
				onClose();
			} else {
				console.log('Available APIs:', {
					vechain: !!(window as any).vechain,
					veworldKit: !!(window as any).veworldKit,
					veworld: !!(window as any).veworld,
				});
				throw new Error(
					'VeChain API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.'
				);
			}
		} catch (err) {
			console.error('Direct VeWorld registration error:', err);
			toast({
				title: '–û—à–∏–±–∫–∞',
				description: `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ VeWorld: ${
					err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
				}`,
				status: 'error',
				duration: 5000,
				isClosable: true,
				position: 'bottom-left',
			});
		}
	};

	const handleAddDonation = async () => {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è
		if (!profileForm.firstName.trim() || !profileForm.lastName.trim()) {
			toast({
				title: '–û—à–∏–±–∫–∞',
				description: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é',
				status: 'error',
				duration: 3000,
				isClosable: true,
				position: 'bottom-left',
			});
			return;
		}

		if (!donationForm.centerId.trim()) {
			toast({
				title: '–û—à–∏–±–∫–∞',
				description: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —Ü–µ–Ω—Ç—Ä–∞ –¥–æ–Ω–æ—Ä—Å—Ç–≤–∞',
				status: 'error',
				duration: 3000,
				isClosable: true,
				position: 'bottom-left',
			});
			return;
		}

		try {
			// –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –¥–æ–Ω–æ—Ä–∞
			await registerDonor();

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage
			const userProfile = {
				firstName: profileForm.firstName,
				lastName: profileForm.lastName,
				email: profileForm.email,
				phone: profileForm.phone,
				address: account,
				registeredAt: new Date().toISOString(),
			};
			localStorage.setItem(
				`userProfile_${account}`,
				JSON.stringify(userProfile)
			);

			toast({
				title: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!',
				description: `${profileForm.firstName} ${profileForm.lastName}, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –¥–æ–Ω–æ—Ä!`,
				status: 'success',
				duration: 3000,
				isClosable: true,
				position: 'bottom-left',
			});

			// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –¥–µ–ø–ª–æ–π–µ—Ä–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–Ω–∞—Ü–∏—é
			if (isDeployer) {
				await addDonation(
					account,
					donationForm.donationType,
					donationForm.amount,
					donationForm.centerId
				);
				toast({
					title: '–£—Å–ø–µ—à–Ω–æ!',
					description: '–í–∞—à–∞ –¥–æ–Ω–∞—Ü–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!',
					status: 'success',
					duration: 5000,
					isClosable: true,
					position: 'bottom-left',
				});
			} else {
				// –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –¥–æ–Ω–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
				toast({
					title: '–î–æ–Ω–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é',
					description:
						'–í–∞—à–∞ –¥–æ–Ω–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.',
					status: 'info',
					duration: 5000,
					isClosable: true,
					position: 'bottom-left',
				});
			}

			onClose();
			// –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
			setDonationForm({
				donationType: 'blood',
				amount: 450,
				centerId: '',
			});
			setProfileForm({
				firstName: '',
				lastName: '',
				email: '',
				phone: '',
			});
		} catch (err) {
			console.error('Registration error:', err);
			toast({
				title: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
				description: err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
				status: 'error',
				duration: 8000,
				isClosable: true,
				position: 'bottom-left',
			});
		}
	};

	return (
		<VStack spacing={6} align="stretch" mt={820}>
			{/* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–æ–Ω–æ—Ä–∞ */}
			<Card bg={cardBg} shadow="lg" borderColor="blue.200" borderWidth="1px">
				<CardBody p={8}>
					<VStack spacing={6} textAlign="center">
						<VStack spacing={3}>
							<Heading color={textColor}>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VeDonate!</Heading>
							<Text fontSize="lg" color={subtextColor} maxW="2xl">
								–í—ã –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –¥–æ–Ω–æ—Ä
							</Text>
						</VStack>
					</VStack>
				</CardBody>
			</Card>

			{/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫–∞–∫ —Å—Ç–∞—Ç—å –¥–æ–Ω–æ—Ä–æ–º */}
			<Card bg={cardBg} shadow="lg">
				<CardBody p={6}>
					<VStack spacing={6}>
						<Heading size="lg" color={textColor} textAlign="center">
							–ö–∞–∫ —Å—Ç–∞—Ç—å –¥–æ–Ω–æ—Ä–æ–º?
						</Heading>

						<Grid
							templateColumns={{ base: '1fr', md: 'repeat(2, 1fr)' }}
							gap={6}
							w="full"
						>
							<GridItem>
								<Card bg="gray.50" borderWidth="1px" borderColor={borderColor}>
									<CardBody p={6}>
										<VStack spacing={4} textAlign="center">
											<Text fontSize="4xl">üè•</Text>
											<Heading size="md" color="black">
												1. –ü–æ—Å–µ—Ç–∏—Ç–µ —Ü–µ–Ω—Ç—Ä –¥–æ–Ω–æ—Ä—Å—Ç–≤–∞
											</Heading>
											<Text fontSize="sm" color="black">
												–ù–∞–π–¥–∏—Ç–µ –±–ª–∏–∂–∞–π—à–∏–π —Ü–µ–Ω—Ç—Ä –¥–æ–Ω–æ—Ä—Å—Ç–≤–∞ –∫—Ä–æ–≤–∏ –∏ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞
												–ø—Ä–∏–µ–º
											</Text>
										</VStack>
									</CardBody>
								</Card>
							</GridItem>

							<GridItem>
								<Card bg="gray.50" borderWidth="1px" borderColor={borderColor}>
									<CardBody p={6}>
										<VStack spacing={4} textAlign="center">
											<Text fontSize="4xl">üìù</Text>
											<Heading size="md" color="black">
												2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –¥–æ–Ω–∞—Ü–∏—é
											</Heading>
											<Text fontSize="sm" color="black">
												–ü–æ—Å–ª–µ –¥–æ–Ω–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ü–∏—é" –¥–ª—è
												—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
											</Text>
										</VStack>
									</CardBody>
								</Card>
							</GridItem>

							<GridItem>
								<Card bg="gray.50" borderWidth="1px" borderColor={borderColor}>
									<CardBody p={6}>
										<VStack spacing={4} textAlign="center">
											<Text fontSize="4xl">ü™ô</Text>
											<Heading size="md" color="black">
												3. –ü–æ–ª—É—á–∞–π—Ç–µ B3TR —Ç–æ–∫–µ–Ω—ã
											</Heading>
											<Text fontSize="sm" color="black">
												–ó–∞ –∫–∞–∂–¥—É—é –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–æ–Ω–∞—Ü–∏—é –≤—ã –ø–æ–ª—É—á–∏—Ç–µ B3TR
												—Ç–æ–∫–µ–Ω—ã
											</Text>
										</VStack>
									</CardBody>
								</Card>
							</GridItem>

							<GridItem>
								<Card bg="gray.50" borderWidth="1px" borderColor={borderColor}>
									<CardBody p={6}>
										<VStack spacing={4} textAlign="center">
											<Text fontSize="4xl">üèÜ</Text>
											<Heading size="md" color="black">
												4. –°–æ–±–∏—Ä–∞–π—Ç–µ NFT –±–µ–π–¥–∂–∏
											</Heading>
											<Text fontSize="sm" color="black">
												–î–æ—Å—Ç–∏–≥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ NFT
												–±–µ–π–¥–∂–∏
											</Text>
										</VStack>
									</CardBody>
								</Card>
							</GridItem>
						</Grid>
					</VStack>
				</CardBody>
			</Card>

			{/* –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–æ–Ω–æ—Ä—Å—Ç–≤–∞ */}
			<Card bg={cardBg} shadow="lg">
				<CardBody p={6}>
					<VStack spacing={6}>
						<Heading size="lg" color={textColor} textAlign="center">
							‚ú® –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–æ–Ω–æ—Ä—Å—Ç–≤–∞
						</Heading>

						<Grid
							templateColumns={{ base: '1fr', md: 'repeat(3, 1fr)' }}
							gap={4}
							w="full"
						>
							<VStack spacing={3} p={4} bg="red.50" borderRadius="md">
								<Text fontSize="3xl">‚ù§Ô∏è</Text>
								<Text fontWeight="bold" color="black" textAlign="center">
									–°–ø–∞—Å–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–π
								</Text>
								<Text fontSize="sm" color="black" textAlign="center">
									–ö–∞–∂–¥–∞—è –¥–æ–Ω–∞—Ü–∏—è –º–æ–∂–µ—Ç —Å–ø–∞—Å—Ç–∏ –¥–æ 3 –∂–∏–∑–Ω–µ–π
								</Text>
							</VStack>

							<VStack spacing={3} p={4} bg="orange.50" borderRadius="md">
								<Text fontSize="3xl">üí∞</Text>
								<Text fontWeight="bold" color="black" textAlign="center">
									B3TR —Ç–æ–∫–µ–Ω—ã
								</Text>
								<Text fontSize="sm" color="black" textAlign="center">
									–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ —Ç–æ–∫–µ–Ω—ã –∑–∞ –∫–∞–∂–¥—É—é –¥–æ–Ω–∞—Ü–∏—é
								</Text>
							</VStack>

							<VStack spacing={3} p={4} bg="purple.50" borderRadius="md">
								<Text fontSize="3xl">üéñÔ∏è</Text>
								<Text fontWeight="bold" color="black" textAlign="center">
									NFT –±–µ–π–¥–∂–∏
								</Text>
								<Text fontSize="sm" color="black" textAlign="center">
									–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä—É–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
								</Text>
							</VStack>
						</Grid>
					</VStack>
				</CardBody>
			</Card>

			{/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã */}
			<Card bg={cardBg} shadow="lg">
				<CardBody p={6}>
					<VStack spacing={4}>
						<Heading size="md" color={textColor} textAlign="center">
							üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
						</Heading>

						<Grid
							templateColumns={{ base: '1fr', md: 'repeat(4, 1fr)' }}
							gap={4}
							w="full"
						>
							<VStack spacing={2} p={3} bg="blue.50" borderRadius="md">
								<Text fontSize="2xl" fontWeight="bold" color="blue.500">
									1,247
								</Text>
								<Text fontSize="sm" color="black" textAlign="center">
									–ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–Ω–æ—Ä–æ–≤
								</Text>
							</VStack>

							<VStack spacing={2} p={3} bg="green.50" borderRadius="md">
								<Text fontSize="2xl" fontWeight="bold" color="green.500">
									15,892
								</Text>
								<Text fontSize="sm" color="black" textAlign="center">
									–í—Å–µ–≥–æ –¥–æ–Ω–∞—Ü–∏–π
								</Text>
							</VStack>

							<VStack spacing={2} p={3} bg="orange.50" borderRadius="md">
								<Text fontSize="2xl" fontWeight="bold" color="orange.500">
									2,847,350
								</Text>
								<Text fontSize="sm" color="black" textAlign="center">
									B3TR —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
								</Text>
							</VStack>

							<VStack spacing={2} p={3} bg="red.50" borderRadius="md">
								<Text fontSize="2xl" fontWeight="bold" color="red.500">
									47,676
								</Text>
								<Text fontSize="sm" color="black" textAlign="center">
									–°–ø–∞—Å–µ–Ω–Ω—ã—Ö –∂–∏–∑–Ω–µ–π
								</Text>
							</VStack>
						</Grid>
					</VStack>
				</CardBody>
			</Card>

			{/* –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é */}
			<Card bg="linear(to-r, orange.400, red.400)" shadow="xl">
				<CardBody p={8}>
					<VStack spacing={4} textAlign="center">
						<Text fontSize="4xl" color="white">
							üöÄ
						</Text>
						<Heading size="lg" color="white">
							–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?
						</Heading>
						<Text color="whiteAlpha.900" maxW="lg">
							–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É –¥–æ–Ω–æ—Ä–æ–≤ VeDonate –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–ø–∞—Å–∞—Ç—å
							–∂–∏–∑–Ω–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!
						</Text>
						<Button
							colorScheme="white"
							variant="outline"
							size="lg"
							px={8}
							py={6}
							fontSize="lg"
							fontWeight="bold"
							onClick={onOpen}
							_hover={{
								bg: 'whiteAlpha.200',
								transform: 'translateY(-2px)',
							}}
							transition="all 0.2s"
						>
							üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –¥–æ–Ω–æ—Ä
						</Button>
					</VStack>
				</CardBody>
			</Card>

			{/* Registration Modal */}
			<Modal isOpen={isOpen} onClose={onClose} size="lg">
				<ModalOverlay />
				<ModalContent>
					<ModalHeader>ü©∏ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–Ω–æ—Ä–∞</ModalHeader>
					<ModalCloseButton />
					<ModalBody pb={6}>
						<VStack spacing={4}>
							{/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
							<VStack spacing={2} w="full">
								<HStack spacing={2} w="full" justify="center">
									<Icon color={connection?.thor ? 'green.500' : 'red.500'}>
										{connection?.thor ? 'üü¢' : 'üî¥'}
									</Icon>
									<Text
										fontSize="sm"
										color={connection?.thor ? 'green.500' : 'red.500'}
									>
										{connection?.thor
											? '–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ VeChain Thor'
											: '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ VeChain Thor'}
									</Text>
								</HStack>
								<Text fontSize="xs" color="gray.500" textAlign="center">
									–°–µ—Ç—å: {connection?.network?.type || '–ó–∞–≥—Ä—É–∑–∫–∞...'} | Chain ID:{' '}
									{connection?.network?.chainId || '–ó–∞–≥—Ä—É–∑–∫–∞...'}
								</Text>
								{!connection?.network?.type && (
									<Text fontSize="xs" color="blue.500" textAlign="center">
										‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ —Ä–∞–≤–Ω–æ
										–≤–æ–∑–º–æ–∂–Ω–∞
									</Text>
								)}
								{!connection?.thor && (
									<Text fontSize="xs" color="orange.500" textAlign="center">
										‚ö†Ô∏è Thor –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –°–∏—Å—Ç–µ–º–∞ –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
										–µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30
										—Å–µ–∫—É–Ω–¥)
									</Text>
								)}
								{connection?.network?.type &&
									connection?.network?.type !== 'test' && (
										<Text fontSize="xs" color="red.500" textAlign="center">
											‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è VeChain Testnet
										</Text>
									)}
							</VStack>

							{/* –ü–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è */}
							<Text fontWeight="bold" color={textColor} alignSelf="start">
								–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
							</Text>

							<HStack spacing={4} w="full">
								<FormControl>
									<FormLabel>–ò–º—è *</FormLabel>
									<Input
										value={profileForm.firstName}
										onChange={(e) =>
											setProfileForm({
												...profileForm,
												firstName: e.target.value,
											})
										}
										placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
									/>
								</FormControl>

								<FormControl>
									<FormLabel>–§–∞–º–∏–ª–∏—è *</FormLabel>
									<Input
										value={profileForm.lastName}
										onChange={(e) =>
											setProfileForm({
												...profileForm,
												lastName: e.target.value,
											})
										}
										placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é"
									/>
								</FormControl>
							</HStack>

							<HStack spacing={4} w="full">
								<FormControl>
									<FormLabel>Email</FormLabel>
									<Input
										type="email"
										value={profileForm.email}
										onChange={(e) =>
											setProfileForm({
												...profileForm,
												email: e.target.value,
											})
										}
										placeholder="example@email.com"
									/>
								</FormControl>

								<FormControl>
									<FormLabel>–¢–µ–ª–µ—Ñ–æ–Ω</FormLabel>
									<Input
										value={profileForm.phone}
										onChange={(e) =>
											setProfileForm({
												...profileForm,
												phone: e.target.value,
											})
										}
										placeholder="+7 (999) 123-45-67"
									/>
								</FormControl>
							</HStack>

							<Divider />

							<Text fontWeight="bold" color={textColor} alignSelf="start">
								–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–Ω–∞—Ü–∏–∏
							</Text>

							<FormControl>
								<FormLabel>–¢–∏–ø –¥–æ–Ω–∞—Ü–∏–∏</FormLabel>
								<Select
									value={donationForm.donationType}
									onChange={(e) =>
										setDonationForm({
											...donationForm,
											donationType: e.target.value,
										})
									}
								>
									<option value="blood">–ö—Ä–æ–≤—å</option>
									<option value="plasma">–ü–ª–∞–∑–º–∞</option>
									<option value="platelets">–¢—Ä–æ–º–±–æ—Ü–∏—Ç—ã</option>
									<option value="bone_marrow">–ö–æ—Å—Ç–Ω—ã–π –º–æ–∑–≥</option>
								</Select>
							</FormControl>

							<FormControl>
								<FormLabel>–û–±—ä–µ–º (–º–ª)</FormLabel>
								<NumberInput
									value={donationForm.amount}
									onChange={(_, value) =>
										setDonationForm({ ...donationForm, amount: value })
									}
									min={50}
									max={1000}
								>
									<NumberInputField />
									<NumberInputStepper>
										<NumberIncrementStepper />
										<NumberDecrementStepper />
									</NumberInputStepper>
								</NumberInput>
							</FormControl>

							<FormControl>
								<FormLabel>ID —Ü–µ–Ω—Ç—Ä–∞ –¥–æ–Ω–æ—Ä—Å—Ç–≤–∞</FormLabel>
								<Input
									value={donationForm.centerId}
									onChange={(e) =>
										setDonationForm({
											...donationForm,
											centerId: e.target.value,
										})
									}
									placeholder="–í–≤–µ–¥–∏—Ç–µ ID —Ü–µ–Ω—Ç—Ä–∞"
								/>
							</FormControl>

							<VStack spacing={4} w="full">
								<Button
									colorScheme="blue"
									variant="outline"
									onClick={handleForceReconnect}
									size="sm"
									w="full"
									isDisabled={isLoading}
								>
									üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å Thor
								</Button>
								<Button
									colorScheme="green"
									variant="outline"
									onClick={handleDirectVeWorldRegistration}
									size="sm"
									w="full"
									isDisabled={isLoading}
								>
									üöÄ –ü—Ä—è–º–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ VeWorld
								</Button>
								<HStack spacing={4} w="full">
									<Button variant="ghost" onClick={onClose} flex={1}>
										–û—Ç–º–µ–Ω–∞
									</Button>
									<Button
										colorScheme="orange"
										onClick={handleAddDonation}
										isLoading={isLoading}
										loadingText="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è..."
										flex={1}
									>
										{isDeployer
											? '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ü–∏—é'
											: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –¥–æ–Ω–æ—Ä'}
									</Button>
								</HStack>
							</VStack>
						</VStack>
					</ModalBody>
				</ModalContent>
			</Modal>
		</VStack>
	);
}
