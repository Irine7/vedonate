'use client';

import React, { useState } from 'react';
import {
	Box,
	Card,
	CardBody,
	VStack,
	HStack,
	Heading,
	Text,
	SimpleGrid,
	Badge,
	Progress,
	Divider,
	useColorModeValue,
	Grid,
	GridItem,
	Icon,
	Flex,
	Spacer,
	Button,
	Modal,
	ModalOverlay,
	ModalContent,
	ModalHeader,
	ModalBody,
	ModalCloseButton,
	useDisclosure,
	FormControl,
	FormLabel,
	Input,
	Select,
	NumberInput,
	NumberInputField,
	NumberInputStepper,
	NumberIncrementStepper,
	NumberDecrementStepper,
	useToast,
} from '@chakra-ui/react';
import { useVeDonate } from '@/hooks/useVeDonate';

interface DonorStatsProps {
	account: string;
}

export function DonorStats({ account }: DonorStatsProps) {
	const {
		donorInfo,
		donorDonations,
		donorBadges,
		b3trBalance,
		getBadgeName,
		getBadgeRequirement,
		getBadgeIcon,
		addDonation,
		isLoading,
		isDeployer,
	} = useVeDonate();

	// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
	const getUserProfile = () => {
		try {
			const profileData = localStorage.getItem(`userProfile_${account}`);
			return profileData ? JSON.parse(profileData) : null;
		} catch {
			return null;
		}
	};

	const userProfile = getUserProfile();

	const { isOpen, onOpen, onClose } = useDisclosure();
	const toast = useToast();

	const [donationForm, setDonationForm] = useState({
		donationType: 'blood',
		amount: 450,
		centerId: '',
	});

	const cardBg = useColorModeValue('white', 'gray.800');
	const textColor = useColorModeValue('gray.800', 'white');
	const subtextColor = useColorModeValue('gray.600', 'gray.300');
	const borderColor = useColorModeValue('gray.200', 'gray.600');

	const handleAddDonation = async () => {
		if (!donationForm.centerId.trim()) {
			toast({
				title: '–û—à–∏–±–∫–∞',
				description: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —Ü–µ–Ω—Ç—Ä–∞ –¥–æ–Ω–æ—Ä—Å—Ç–≤–∞',
				status: 'error',
				duration: 3000,
				isClosable: true,
				position: 'bottom-left',
			});
			return;
		}

		try {
			if (isDeployer) {
				await addDonation(
					account,
					donationForm.donationType,
					donationForm.amount,
					donationForm.centerId
				);
				toast({
					title: '–£—Å–ø–µ—à–Ω–æ!',
					description: '–î–æ–Ω–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!',
					status: 'success',
					duration: 5000,
					isClosable: true,
					position: 'bottom-left',
				});
			} else {
				toast({
					title: '–î–æ–Ω–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é',
					description:
						'–í–∞—à–∞ –¥–æ–Ω–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.',
					status: 'info',
					duration: 5000,
					isClosable: true,
					position: 'bottom-left',
				});
			}

			onClose();
			// –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
			setDonationForm({
				donationType: 'blood',
				amount: 450,
				centerId: '',
			});
		} catch (err) {
			toast({
				title: '–û—à–∏–±–∫–∞',
				description: err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
				status: 'error',
				duration: 5000,
				isClosable: true,
				position: 'bottom-left',
			});
		}
	};

	if (!donorInfo) {
		return (
			<Card bg={cardBg} shadow="lg">
				<CardBody p={6}>
					<Text color={subtextColor} textAlign="center">
						–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...
					</Text>
				</CardBody>
			</Card>
		);
	}

	const totalDonations = Number(donorInfo.totalDonations);
	const currentLevel = Math.floor(totalDonations / 5);
	const nextLevel = currentLevel + 1;
	const progressToNext = ((totalDonations % 5) / 5) * 100;
	const donationsNeeded = 5 - (totalDonations % 5);

	const formatDate = (timestamp: number) => {
		return new Date(timestamp * 1000).toLocaleDateString('ru-RU', {
			year: 'numeric',
			month: 'long',
			day: 'numeric',
		});
	};

	const getDonationTypeEmoji = (type: string) => {
		switch (type.toLowerCase()) {
			case 'blood':
				return 'ü©∏';
			case 'plasma':
				return 'ü©π';
			case 'platelets':
				return 'ü©∫';
			case 'bone_marrow':
				return 'ü¶¥';
			default:
				return 'üíâ';
		}
	};

	return (
		<VStack spacing={6} align="stretch">
			{/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
			<Heading size="lg" color={textColor} textAlign="center">
				üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–Ω–æ—Ä—Å—Ç–≤–∞
				{userProfile && (
					<Text fontSize="md" color={subtextColor} fontWeight="normal" mt={2}>
						–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {userProfile.firstName} {userProfile.lastName}!
					</Text>
				)}
			</Heading>

			{/* –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
			<SimpleGrid columns={{ base: 1, md: 2, lg: 4 }} spacing={4}>
				<Card bg={cardBg} shadow="md" borderColor="red.200" borderWidth="1px">
					<CardBody p={4}>
						<VStack spacing={2}>
							<Icon fontSize="2xl" color="red.500">
								ü©∏
							</Icon>
							<Text fontSize="2xl" fontWeight="bold" color="red.500">
								{totalDonations}
							</Text>
							<Text fontSize="sm" color={subtextColor} textAlign="center">
								–í—Å–µ–≥–æ –¥–æ–Ω–∞—Ü–∏–π
							</Text>
						</VStack>
					</CardBody>
				</Card>

				<Card
					bg={cardBg}
					shadow="md"
					borderColor="orange.200"
					borderWidth="1px"
				>
					<CardBody p={4}>
						<VStack spacing={2}>
							<Icon fontSize="2xl" color="orange.500">
								ü™ô
							</Icon>
							<Text fontSize="2xl" fontWeight="bold" color="orange.500">
								{b3trBalance?.toString() || '0'}
							</Text>
							<Text fontSize="sm" color={subtextColor} textAlign="center">
								B3TR —Ç–æ–∫–µ–Ω–æ–≤
							</Text>
						</VStack>
					</CardBody>
				</Card>

				<Card
					bg={cardBg}
					shadow="md"
					borderColor="purple.200"
					borderWidth="1px"
				>
					<CardBody p={4}>
						<VStack spacing={2}>
							<Icon fontSize="2xl" color="purple.500">
								üèÜ
							</Icon>
							<Text fontSize="2xl" fontWeight="bold" color="purple.500">
								{currentLevel}
							</Text>
							<Text fontSize="sm" color={subtextColor} textAlign="center">
								–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
							</Text>
						</VStack>
					</CardBody>
				</Card>

				<Card bg={cardBg} shadow="md" borderColor="green.200" borderWidth="1px">
					<CardBody p={4}>
						<VStack spacing={2}>
							<Icon fontSize="2xl" color="green.500">
								üíé
							</Icon>
							<Text fontSize="2xl" fontWeight="bold" color="green.500">
								{donorBadges?.length || 0}
							</Text>
							<Text fontSize="sm" color={subtextColor} textAlign="center">
								NFT –±–µ–π–¥–∂–µ–π
							</Text>
						</VStack>
					</CardBody>
				</Card>
			</SimpleGrid>

			{/* –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è */}
			<Card bg={cardBg} shadow="lg">
				<CardBody p={6}>
					<VStack spacing={4}>
						<Heading size="md" color={textColor}>
							üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
						</Heading>
						<VStack spacing={2} w="full">
							<HStack justify="space-between" w="full">
								<Text color={subtextColor}>
									–£—Ä–æ–≤–µ–Ω—å {currentLevel} ‚Üí {nextLevel}
								</Text>
								<Badge colorScheme="purple" variant="subtle">
									{donationsNeeded} –¥–æ–Ω–∞—Ü–∏–π –¥–æ —É—Ä–æ–≤–Ω—è
								</Badge>
							</HStack>
							<Progress
								value={progressToNext}
								size="lg"
								colorScheme="purple"
								borderRadius="full"
								w="full"
							/>
							<Text fontSize="sm" color={subtextColor}>
								{totalDonations % 5} –∏–∑ 5 –¥–æ–Ω–∞—Ü–∏–π
							</Text>
						</VStack>
					</VStack>
				</CardBody>
			</Card>

			{/* NFT –±–µ–π–¥–∂–∏ */}
			{donorBadges && donorBadges.length > 0 && (
				<Card bg={cardBg} shadow="lg">
					<CardBody p={6}>
						<VStack spacing={4}>
							<Heading size="md" color={textColor}>
								üèÜ –í–∞—à–∏ NFT –±–µ–π–¥–∂–∏
							</Heading>
							<Grid
								templateColumns={{
									base: '1fr',
									md: 'repeat(2, 1fr)',
									lg: 'repeat(3, 1fr)',
								}}
								gap={4}
								w="full"
							>
								{donorBadges.map((badge, index) => (
									<GridItem key={index}>
										<Card
											bg="gray.50"
											borderWidth="1px"
											borderColor={borderColor}
										>
											<CardBody p={4}>
												<VStack spacing={2}>
													<Text fontSize="2xl">{getBadgeIcon(badge)}</Text>
													<Text
														fontWeight="bold"
														fontSize="sm"
														color={textColor}
														textAlign="center"
													>
														{getBadgeName(badge as any)}
													</Text>
													<Badge
														colorScheme="purple"
														variant="subtle"
														fontSize="xs"
													>
														–£—Ä–æ–≤–µ–Ω—å {badge.toString()}
													</Badge>
												</VStack>
											</CardBody>
										</Card>
									</GridItem>
								))}
							</Grid>
						</VStack>
					</CardBody>
				</Card>
			)}

			{/* –ò—Å—Ç–æ—Ä–∏—è –¥–æ–Ω–∞—Ü–∏–π */}
			{donorDonations && donorDonations.length > 0 && (
				<Card bg={cardBg} shadow="lg">
					<CardBody p={6}>
						<VStack spacing={4}>
							<Heading size="md" color={textColor}>
								üìã –ò—Å—Ç–æ—Ä–∏—è –¥–æ–Ω–∞—Ü–∏–π
							</Heading>
							<VStack spacing={3} w="full">
								{donorDonations.slice(0, 10).map((donation, index) => (
									<Box key={index} w="full">
										<HStack
											justify="space-between"
											align="center"
											p={3}
											bg="gray.50"
											borderRadius="md"
										>
											<HStack spacing={3}>
												<Text fontSize="xl">
													{getDonationTypeEmoji(donation.donationType)}
												</Text>
												<VStack align="start" spacing={1}>
													<Text fontWeight="medium" color={textColor}>
														{getBadgeName(donation.donationType as any)}
													</Text>
													<Text fontSize="sm" color={subtextColor}>
														{formatDate(Number(donation.timestamp))}
													</Text>
												</VStack>
											</HStack>
											<VStack align="end" spacing={1}>
												<Badge colorScheme="green" variant="subtle">
													+{donation.amount} B3TR
												</Badge>
												<Text fontSize="xs" color={subtextColor}>
													–¶–µ–Ω—Ç—Ä #{donation.centerId}
												</Text>
											</VStack>
										</HStack>
										{index < donorDonations.slice(0, 10).length - 1 && (
											<Divider mt={2} />
										)}
									</Box>
								))}
							</VStack>
							{donorDonations.length > 10 && (
								<Text fontSize="sm" color={subtextColor} textAlign="center">
									–ò –µ—â–µ {donorDonations.length - 10} –¥–æ–Ω–∞—Ü–∏–π...
								</Text>
							)}
						</VStack>
					</CardBody>
				</Card>
			)}

			{/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
			<Card bg={cardBg} shadow="lg" borderColor="green.200" borderWidth="1px">
				<CardBody p={6}>
					<VStack spacing={4}>
						<HStack spacing={4} w="full">
							<Icon fontSize="3xl" color="green.500">
								‚úÖ
							</Icon>
							<VStack align="start" spacing={1} flex={1}>
								<Text fontWeight="bold" color={textColor}>
									{userProfile
										? `${userProfile.firstName} ${userProfile.lastName}`
										: '–î–æ–Ω–æ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'}
								</Text>
								<Text fontSize="sm" color={subtextColor}>
									{userProfile
										? `–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ${new Date(
												userProfile.registeredAt
										  ).toLocaleDateString('ru-RU')}`
										: '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ VeDonate'}
								</Text>
								{userProfile?.email && (
									<Text fontSize="xs" color={subtextColor}>
										üìß {userProfile.email}
									</Text>
								)}
								{userProfile?.phone && (
									<Text fontSize="xs" color={subtextColor}>
										üì± {userProfile.phone}
									</Text>
								)}
							</VStack>
							<Badge colorScheme="green" variant="subtle" px={3} py={1}>
								–ê–∫—Ç–∏–≤–µ–Ω
							</Badge>
						</HStack>
						<Button
							colorScheme="orange"
							variant="outline"
							size="md"
							onClick={onOpen}
							leftIcon={<Icon>ü©∏</Icon>}
							w="full"
						>
							–î–æ–±–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ü–∏—é
						</Button>
					</VStack>
				</CardBody>
			</Card>

			{/* Add Donation Modal */}
			<Modal isOpen={isOpen} onClose={onClose} size="lg">
				<ModalOverlay />
				<ModalContent>
					<ModalHeader>ü©∏ –î–æ–±–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ü–∏—é</ModalHeader>
					<ModalCloseButton />
					<ModalBody pb={6}>
						<VStack spacing={4}>
							<FormControl>
								<FormLabel>–¢–∏–ø –¥–æ–Ω–∞—Ü–∏–∏</FormLabel>
								<Select
									value={donationForm.donationType}
									onChange={(e) =>
										setDonationForm({
											...donationForm,
											donationType: e.target.value,
										})
									}
								>
									<option value="blood">–ö—Ä–æ–≤—å</option>
									<option value="plasma">–ü–ª–∞–∑–º–∞</option>
									<option value="platelets">–¢—Ä–æ–º–±–æ—Ü–∏—Ç—ã</option>
									<option value="bone_marrow">–ö–æ—Å—Ç–Ω—ã–π –º–æ–∑–≥</option>
								</Select>
							</FormControl>

							<FormControl>
								<FormLabel>–û–±—ä–µ–º (–º–ª)</FormLabel>
								<NumberInput
									value={donationForm.amount}
									onChange={(_, value) =>
										setDonationForm({ ...donationForm, amount: value })
									}
									min={50}
									max={1000}
								>
									<NumberInputField />
									<NumberInputStepper>
										<NumberIncrementStepper />
										<NumberDecrementStepper />
									</NumberInputStepper>
								</NumberInput>
							</FormControl>

							<FormControl>
								<FormLabel>ID —Ü–µ–Ω—Ç—Ä–∞ –¥–æ–Ω–æ—Ä—Å—Ç–≤–∞</FormLabel>
								<Input
									value={donationForm.centerId}
									onChange={(e) =>
										setDonationForm({
											...donationForm,
											centerId: e.target.value,
										})
									}
									placeholder="–í–≤–µ–¥–∏—Ç–µ ID —Ü–µ–Ω—Ç—Ä–∞"
								/>
							</FormControl>

							<HStack spacing={4} w="full">
								<Button variant="ghost" onClick={onClose} flex={1}>
									–û—Ç–º–µ–Ω–∞
								</Button>
								<Button
									colorScheme="orange"
									onClick={handleAddDonation}
									isLoading={isLoading}
									loadingText="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ..."
									flex={1}
								>
									{isDeployer ? '–î–æ–±–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ü–∏—é' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é'}
								</Button>
							</HStack>
						</VStack>
					</ModalBody>
				</ModalContent>
			</Modal>
		</VStack>
	);
}
