'use client';

import { type ReactElement, useState } from 'react';
import {
	Box,
	Button,
	VStack,
	Text,
	Input,
	useToast,
	Progress,
	HStack,
	Icon,
	Alert,
	AlertIcon,
	AlertTitle,
	AlertDescription,
	Select,
	FormControl,
	FormLabel,
} from '@chakra-ui/react';
import { useVeDonate } from '@/hooks/useVeDonate';
import { useSafeWallet } from '@/hooks/useSafeWallet';

interface UploadState {
	isUploading: boolean;
	progress: number;
	status: 'idle' | 'uploading' | 'processing' | 'success' | 'error';
	message: string;
}

export function UploadCertificate(): ReactElement {
	const [uploadState, setUploadState] = useState<UploadState>({
		isUploading: false,
		progress: 0,
		status: 'idle',
		message: '',
	});
	const [selectedFile, setSelectedFile] = useState<File | null>(null);
	const [donationType, setDonationType] = useState<'blood' | 'plasma'>('blood');
	const [amount, setAmount] = useState<string>('450');
	const [centerId, setCenterId] = useState<string>('center-001');

	const { addDonation } = useVeDonate();
	const { account } = useSafeWallet();
	const toast = useToast();

	const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
		const file = event.target.files?.[0];
		if (file) {
			setSelectedFile(file);
			setUploadState({
				isUploading: false,
				progress: 0,
				status: 'idle',
				message: '',
			});
		}
	};

	const handleUpload = async () => {
		if (!selectedFile || !account) {
			toast({
				title: '–û—à–∏–±–∫–∞',
				description:
					'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω',
				status: 'error',
				duration: 3000,
				isClosable: true,
			});
			return;
		}

		setUploadState({
			isUploading: true,
			progress: 0,
			status: 'uploading',
			message: '–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª...',
		});

		try {
			// –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
			for (let i = 0; i <= 100; i += 10) {
				await new Promise((resolve) => setTimeout(resolve, 100));
				setUploadState((prev) => ({
					...prev,
					progress: i,
				}));
			}

			setUploadState({
				isUploading: false,
				progress: 100,
				status: 'processing',
				message: 'AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç...',
			});

			// –°–∏–º—É–ª—è—Ü–∏—è AI –æ–±—Ä–∞–±–æ—Ç–∫–∏
			await new Promise((resolve) => setTimeout(resolve, 2000));

			// –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–Ω–∞—Ü–∏—é –≤ –±–ª–æ–∫—á–µ–π–Ω
			setUploadState({
				isUploading: false,
				progress: 100,
				status: 'processing',
				message: '–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–ª–æ–∫—á–µ–π–Ω...',
			});

			await addDonation(account, donationType, parseInt(amount), centerId);

			// –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
			setUploadState({
				isUploading: false,
				progress: 100,
				status: 'success',
				message: `–î–æ–Ω–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ü–æ–ª—É—á–µ–Ω–æ ${
					donationType === 'blood' ? '10' : '15'
				} B3TR —Ç–æ–∫–µ–Ω–æ–≤`,
			});

			toast({
				title: '–£—Å–ø–µ—à–Ω–æ!',
				description: '–î–æ–Ω–∞—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω. –ü–æ–ª—É—á–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã –∏ NFT.',
				status: 'success',
				duration: 5000,
				isClosable: true,
			});
		} catch (error) {
			setUploadState({
				isUploading: false,
				progress: 0,
				status: 'error',
				message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω',
			});

			toast({
				title: '–û—à–∏–±–∫–∞',
				description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –±–ª–æ–∫—á–µ–π–Ω',
				status: 'error',
				duration: 3000,
				isClosable: true,
			});
		}
	};

	const getStatusAlert = () => {
		if (uploadState.status === 'success') {
			return (
				<Alert status="success">
					<AlertIcon />
					<Box>
						<AlertTitle>–î–æ–Ω–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</AlertTitle>
						<AlertDescription>
							–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –±–ª–æ–∫—á–µ–π–Ω VeChain. –¢–æ–∫–µ–Ω—ã –∏ NFT –Ω–∞—á–∏—Å–ª–µ–Ω—ã.
						</AlertDescription>
					</Box>
				</Alert>
			);
		}

		if (uploadState.status === 'error') {
			return (
				<Alert status="error">
					<AlertIcon />
					<Box>
						<AlertTitle>–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</AlertTitle>
						<AlertDescription>
							–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–Ω–∞—Ü–∏—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –∏
							–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–ª–æ–∫—á–µ–π–Ω—É.
						</AlertDescription>
					</Box>
				</Alert>
			);
		}

		return null;
	};

	return (
		<VStack spacing={4} align="stretch">
			{getStatusAlert()}

			<FormControl>
				<FormLabel>–¢–∏–ø –¥–æ–Ω–∞—Ü–∏–∏</FormLabel>
				<Select
					value={donationType}
					onChange={(e) =>
						setDonationType(e.target.value as 'blood' | 'plasma')
					}
					disabled={uploadState.isUploading}
				>
					<option value="blood">–ö—Ä–æ–≤—å (450 –º–ª) - 10 B3TR</option>
					<option value="plasma">–ü–ª–∞–∑–º–∞ (600 –º–ª) - 15 B3TR</option>
				</Select>
			</FormControl>

			<FormControl>
				<FormLabel>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–º–ª)</FormLabel>
				<Input
					type="number"
					value={amount}
					onChange={(e) => setAmount(e.target.value)}
					disabled={uploadState.isUploading}
					placeholder="450"
				/>
			</FormControl>

			<FormControl>
				<FormLabel>ID —Ü–µ–Ω—Ç—Ä–∞ —Å–¥–∞—á–∏</FormLabel>
				<Select
					value={centerId}
					onChange={(e) => setCenterId(e.target.value)}
					disabled={uploadState.isUploading}
				>
					<option value="center-001">–¶–µ–Ω—Ç—Ä –∫—Ä–æ–≤–∏ ‚Ññ1</option>
					<option value="center-002">–ú–µ–¥—Ü–µ–Ω—Ç—Ä "–ó–¥–æ—Ä–æ–≤—å–µ"</option>
					<option value="center-003">–ë–æ–ª—å–Ω–∏—Ü–∞ ‚Ññ5</option>
				</Select>
			</FormControl>

			<Box>
				<Text mb={2} fontWeight="medium">
					–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ —Å–ø—Ä–∞–≤–∫–∏ –æ –¥–æ–Ω–∞—Ü–∏–∏:
				</Text>
				<Input
					type="file"
					accept="image/*"
					onChange={handleFileSelect}
					disabled={uploadState.isUploading}
					mb={3}
				/>
				{selectedFile && (
					<Text fontSize="sm" color="gray.600">
						–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {selectedFile.name}
					</Text>
				)}
			</Box>

			{uploadState.isUploading && (
				<Box>
					<HStack mb={2}>
						<Icon>
							<Text>ü§ñ</Text>
						</Icon>
						<Text fontSize="sm">{uploadState.message}</Text>
					</HStack>
					<Progress value={uploadState.progress} colorScheme="red" />
				</Box>
			)}

			<Button
				colorScheme="red"
				onClick={handleUpload}
				disabled={!selectedFile || uploadState.isUploading || !account}
				loadingText="–û–±—Ä–∞–±–æ—Ç–∫–∞..."
				isLoading={uploadState.isUploading}
			>
				<Icon mr={2}>
					<Text>üì∏</Text>
				</Icon>
				–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –±–ª–æ–∫—á–µ–π–Ω
			</Button>

			<Text fontSize="xs" color="gray.500" textAlign="center">
				AI –ø—Ä–æ–≤–µ—Ä–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç, –∑–∞—Ç–µ–º –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã –≤ VeChain –±–ª–æ–∫—á–µ–π–Ω
			</Text>
		</VStack>
	);
}
